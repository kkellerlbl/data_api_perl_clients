#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
require 5.6.0;
use strict;
use warnings;
use Thrift;

package DOEKBase::DataAPI::taxonomy::taxon::ObjectInfo;
use base qw(Class::Accessor);
DOEKBase::DataAPI::taxonomy::taxon::ObjectInfo->mk_accessors( qw( object_id object_name object_reference object_reference_versioned type_string save_date version saved_by workspace_id workspace_name object_checksum object_size object_metadata ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{object_id} = undef;
  $self->{object_name} = undef;
  $self->{object_reference} = undef;
  $self->{object_reference_versioned} = undef;
  $self->{type_string} = undef;
  $self->{save_date} = undef;
  $self->{version} = undef;
  $self->{saved_by} = undef;
  $self->{workspace_id} = undef;
  $self->{workspace_name} = undef;
  $self->{object_checksum} = undef;
  $self->{object_size} = undef;
  $self->{object_metadata} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{object_id}) {
      $self->{object_id} = $vals->{object_id};
    }
    if (defined $vals->{object_name}) {
      $self->{object_name} = $vals->{object_name};
    }
    if (defined $vals->{object_reference}) {
      $self->{object_reference} = $vals->{object_reference};
    }
    if (defined $vals->{object_reference_versioned}) {
      $self->{object_reference_versioned} = $vals->{object_reference_versioned};
    }
    if (defined $vals->{type_string}) {
      $self->{type_string} = $vals->{type_string};
    }
    if (defined $vals->{save_date}) {
      $self->{save_date} = $vals->{save_date};
    }
    if (defined $vals->{version}) {
      $self->{version} = $vals->{version};
    }
    if (defined $vals->{saved_by}) {
      $self->{saved_by} = $vals->{saved_by};
    }
    if (defined $vals->{workspace_id}) {
      $self->{workspace_id} = $vals->{workspace_id};
    }
    if (defined $vals->{workspace_name}) {
      $self->{workspace_name} = $vals->{workspace_name};
    }
    if (defined $vals->{object_checksum}) {
      $self->{object_checksum} = $vals->{object_checksum};
    }
    if (defined $vals->{object_size}) {
      $self->{object_size} = $vals->{object_size};
    }
    if (defined $vals->{object_metadata}) {
      $self->{object_metadata} = $vals->{object_metadata};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'ObjectInfo';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::I64) {
        $xfer += $input->readI64(\$self->{object_id});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{object_name});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{object_reference});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{object_reference_versioned});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{type_string});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{save_date});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^7$/ && do{      if ($ftype == TType::I64) {
        $xfer += $input->readI64(\$self->{version});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^8$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{saved_by});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^9$/ && do{      if ($ftype == TType::I64) {
        $xfer += $input->readI64(\$self->{workspace_id});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^10$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{workspace_name});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^11$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{object_checksum});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^12$/ && do{      if ($ftype == TType::I64) {
        $xfer += $input->readI64(\$self->{object_size});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^13$/ && do{      if ($ftype == TType::MAP) {
        {
          my $_size0 = 0;
          $self->{object_metadata} = {};
          my $_ktype1 = 0;
          my $_vtype2 = 0;
          $xfer += $input->readMapBegin(\$_ktype1, \$_vtype2, \$_size0);
          for (my $_i4 = 0; $_i4 < $_size0; ++$_i4)
          {
            my $key5 = '';
            my $val6 = '';
            $xfer += $input->readString(\$key5);
            $xfer += $input->readString(\$val6);
            $self->{object_metadata}->{$key5} = $val6;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('ObjectInfo');
  if (defined $self->{object_id}) {
    $xfer += $output->writeFieldBegin('object_id', TType::I64, 1);
    $xfer += $output->writeI64($self->{object_id});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{object_name}) {
    $xfer += $output->writeFieldBegin('object_name', TType::STRING, 2);
    $xfer += $output->writeString($self->{object_name});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{object_reference}) {
    $xfer += $output->writeFieldBegin('object_reference', TType::STRING, 3);
    $xfer += $output->writeString($self->{object_reference});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{object_reference_versioned}) {
    $xfer += $output->writeFieldBegin('object_reference_versioned', TType::STRING, 4);
    $xfer += $output->writeString($self->{object_reference_versioned});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type_string}) {
    $xfer += $output->writeFieldBegin('type_string', TType::STRING, 5);
    $xfer += $output->writeString($self->{type_string});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{save_date}) {
    $xfer += $output->writeFieldBegin('save_date', TType::STRING, 6);
    $xfer += $output->writeString($self->{save_date});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{version}) {
    $xfer += $output->writeFieldBegin('version', TType::I64, 7);
    $xfer += $output->writeI64($self->{version});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{saved_by}) {
    $xfer += $output->writeFieldBegin('saved_by', TType::STRING, 8);
    $xfer += $output->writeString($self->{saved_by});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{workspace_id}) {
    $xfer += $output->writeFieldBegin('workspace_id', TType::I64, 9);
    $xfer += $output->writeI64($self->{workspace_id});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{workspace_name}) {
    $xfer += $output->writeFieldBegin('workspace_name', TType::STRING, 10);
    $xfer += $output->writeString($self->{workspace_name});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{object_checksum}) {
    $xfer += $output->writeFieldBegin('object_checksum', TType::STRING, 11);
    $xfer += $output->writeString($self->{object_checksum});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{object_size}) {
    $xfer += $output->writeFieldBegin('object_size', TType::I64, 12);
    $xfer += $output->writeI64($self->{object_size});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{object_metadata}) {
    $xfer += $output->writeFieldBegin('object_metadata', TType::MAP, 13);
    {
      $xfer += $output->writeMapBegin(TType::STRING, TType::STRING, scalar(keys %{$self->{object_metadata}}));
      {
        while( my ($kiter7,$viter8) = each %{$self->{object_metadata}}) 
        {
          $xfer += $output->writeString($kiter7);
          $xfer += $output->writeString($viter8);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::taxonomy::taxon::ExternalDataUnit;
use base qw(Class::Accessor);
DOEKBase::DataAPI::taxonomy::taxon::ExternalDataUnit->mk_accessors( qw( resource_name resource_url resource_version resource_release_date data_url data_id description ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{resource_name} = undef;
  $self->{resource_url} = undef;
  $self->{resource_version} = undef;
  $self->{resource_release_date} = undef;
  $self->{data_url} = undef;
  $self->{data_id} = undef;
  $self->{description} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{resource_name}) {
      $self->{resource_name} = $vals->{resource_name};
    }
    if (defined $vals->{resource_url}) {
      $self->{resource_url} = $vals->{resource_url};
    }
    if (defined $vals->{resource_version}) {
      $self->{resource_version} = $vals->{resource_version};
    }
    if (defined $vals->{resource_release_date}) {
      $self->{resource_release_date} = $vals->{resource_release_date};
    }
    if (defined $vals->{data_url}) {
      $self->{data_url} = $vals->{data_url};
    }
    if (defined $vals->{data_id}) {
      $self->{data_id} = $vals->{data_id};
    }
    if (defined $vals->{description}) {
      $self->{description} = $vals->{description};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'ExternalDataUnit';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{resource_name});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{resource_url});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{resource_version});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{resource_release_date});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{data_url});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{data_id});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^7$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{description});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('ExternalDataUnit');
  if (defined $self->{resource_name}) {
    $xfer += $output->writeFieldBegin('resource_name', TType::STRING, 1);
    $xfer += $output->writeString($self->{resource_name});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{resource_url}) {
    $xfer += $output->writeFieldBegin('resource_url', TType::STRING, 2);
    $xfer += $output->writeString($self->{resource_url});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{resource_version}) {
    $xfer += $output->writeFieldBegin('resource_version', TType::STRING, 3);
    $xfer += $output->writeString($self->{resource_version});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{resource_release_date}) {
    $xfer += $output->writeFieldBegin('resource_release_date', TType::STRING, 4);
    $xfer += $output->writeString($self->{resource_release_date});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{data_url}) {
    $xfer += $output->writeFieldBegin('data_url', TType::STRING, 5);
    $xfer += $output->writeString($self->{data_url});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{data_id}) {
    $xfer += $output->writeFieldBegin('data_id', TType::STRING, 6);
    $xfer += $output->writeString($self->{data_id});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{description}) {
    $xfer += $output->writeFieldBegin('description', TType::STRING, 7);
    $xfer += $output->writeString($self->{description});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::taxonomy::taxon::ObjectProvenanceAction;
use base qw(Class::Accessor);
DOEKBase::DataAPI::taxonomy::taxon::ObjectProvenanceAction->mk_accessors( qw( time service_name service_version service_method method_parameters script_name script_version script_command_line input_object_references validated_object_references intermediate_input_ids intermediate_output_ids external_data description ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{time} = undef;
  $self->{service_name} = undef;
  $self->{service_version} = undef;
  $self->{service_method} = undef;
  $self->{method_parameters} = undef;
  $self->{script_name} = undef;
  $self->{script_version} = undef;
  $self->{script_command_line} = undef;
  $self->{input_object_references} = undef;
  $self->{validated_object_references} = undef;
  $self->{intermediate_input_ids} = undef;
  $self->{intermediate_output_ids} = undef;
  $self->{external_data} = undef;
  $self->{description} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{time}) {
      $self->{time} = $vals->{time};
    }
    if (defined $vals->{service_name}) {
      $self->{service_name} = $vals->{service_name};
    }
    if (defined $vals->{service_version}) {
      $self->{service_version} = $vals->{service_version};
    }
    if (defined $vals->{service_method}) {
      $self->{service_method} = $vals->{service_method};
    }
    if (defined $vals->{method_parameters}) {
      $self->{method_parameters} = $vals->{method_parameters};
    }
    if (defined $vals->{script_name}) {
      $self->{script_name} = $vals->{script_name};
    }
    if (defined $vals->{script_version}) {
      $self->{script_version} = $vals->{script_version};
    }
    if (defined $vals->{script_command_line}) {
      $self->{script_command_line} = $vals->{script_command_line};
    }
    if (defined $vals->{input_object_references}) {
      $self->{input_object_references} = $vals->{input_object_references};
    }
    if (defined $vals->{validated_object_references}) {
      $self->{validated_object_references} = $vals->{validated_object_references};
    }
    if (defined $vals->{intermediate_input_ids}) {
      $self->{intermediate_input_ids} = $vals->{intermediate_input_ids};
    }
    if (defined $vals->{intermediate_output_ids}) {
      $self->{intermediate_output_ids} = $vals->{intermediate_output_ids};
    }
    if (defined $vals->{external_data}) {
      $self->{external_data} = $vals->{external_data};
    }
    if (defined $vals->{description}) {
      $self->{description} = $vals->{description};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'ObjectProvenanceAction';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{time});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{service_name});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{service_version});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{service_method});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size9 = 0;
          $self->{method_parameters} = [];
          my $_etype12 = 0;
          $xfer += $input->readListBegin(\$_etype12, \$_size9);
          for (my $_i13 = 0; $_i13 < $_size9; ++$_i13)
          {
            my $elem14 = undef;
            $xfer += $input->readString(\$elem14);
            push(@{$self->{method_parameters}},$elem14);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{script_name});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^7$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{script_version});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^8$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{script_command_line});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^9$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size15 = 0;
          $self->{input_object_references} = [];
          my $_etype18 = 0;
          $xfer += $input->readListBegin(\$_etype18, \$_size15);
          for (my $_i19 = 0; $_i19 < $_size15; ++$_i19)
          {
            my $elem20 = undef;
            $xfer += $input->readString(\$elem20);
            push(@{$self->{input_object_references}},$elem20);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^10$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size21 = 0;
          $self->{validated_object_references} = [];
          my $_etype24 = 0;
          $xfer += $input->readListBegin(\$_etype24, \$_size21);
          for (my $_i25 = 0; $_i25 < $_size21; ++$_i25)
          {
            my $elem26 = undef;
            $xfer += $input->readString(\$elem26);
            push(@{$self->{validated_object_references}},$elem26);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^11$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size27 = 0;
          $self->{intermediate_input_ids} = [];
          my $_etype30 = 0;
          $xfer += $input->readListBegin(\$_etype30, \$_size27);
          for (my $_i31 = 0; $_i31 < $_size27; ++$_i31)
          {
            my $elem32 = undef;
            $xfer += $input->readString(\$elem32);
            push(@{$self->{intermediate_input_ids}},$elem32);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^12$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size33 = 0;
          $self->{intermediate_output_ids} = [];
          my $_etype36 = 0;
          $xfer += $input->readListBegin(\$_etype36, \$_size33);
          for (my $_i37 = 0; $_i37 < $_size33; ++$_i37)
          {
            my $elem38 = undef;
            $xfer += $input->readString(\$elem38);
            push(@{$self->{intermediate_output_ids}},$elem38);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^13$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size39 = 0;
          $self->{external_data} = [];
          my $_etype42 = 0;
          $xfer += $input->readListBegin(\$_etype42, \$_size39);
          for (my $_i43 = 0; $_i43 < $_size39; ++$_i43)
          {
            my $elem44 = undef;
            $elem44 = new DOEKBase::DataAPI::taxonomy::taxon::ExternalDataUnit();
            $xfer += $elem44->read($input);
            push(@{$self->{external_data}},$elem44);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^14$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{description});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('ObjectProvenanceAction');
  if (defined $self->{time}) {
    $xfer += $output->writeFieldBegin('time', TType::STRING, 1);
    $xfer += $output->writeString($self->{time});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{service_name}) {
    $xfer += $output->writeFieldBegin('service_name', TType::STRING, 2);
    $xfer += $output->writeString($self->{service_name});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{service_version}) {
    $xfer += $output->writeFieldBegin('service_version', TType::STRING, 3);
    $xfer += $output->writeString($self->{service_version});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{service_method}) {
    $xfer += $output->writeFieldBegin('service_method', TType::STRING, 4);
    $xfer += $output->writeString($self->{service_method});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{method_parameters}) {
    $xfer += $output->writeFieldBegin('method_parameters', TType::LIST, 5);
    {
      $xfer += $output->writeListBegin(TType::STRING, scalar(@{$self->{method_parameters}}));
      {
        foreach my $iter45 (@{$self->{method_parameters}}) 
        {
          $xfer += $output->writeString($iter45);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{script_name}) {
    $xfer += $output->writeFieldBegin('script_name', TType::STRING, 6);
    $xfer += $output->writeString($self->{script_name});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{script_version}) {
    $xfer += $output->writeFieldBegin('script_version', TType::STRING, 7);
    $xfer += $output->writeString($self->{script_version});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{script_command_line}) {
    $xfer += $output->writeFieldBegin('script_command_line', TType::STRING, 8);
    $xfer += $output->writeString($self->{script_command_line});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{input_object_references}) {
    $xfer += $output->writeFieldBegin('input_object_references', TType::LIST, 9);
    {
      $xfer += $output->writeListBegin(TType::STRING, scalar(@{$self->{input_object_references}}));
      {
        foreach my $iter46 (@{$self->{input_object_references}}) 
        {
          $xfer += $output->writeString($iter46);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{validated_object_references}) {
    $xfer += $output->writeFieldBegin('validated_object_references', TType::LIST, 10);
    {
      $xfer += $output->writeListBegin(TType::STRING, scalar(@{$self->{validated_object_references}}));
      {
        foreach my $iter47 (@{$self->{validated_object_references}}) 
        {
          $xfer += $output->writeString($iter47);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{intermediate_input_ids}) {
    $xfer += $output->writeFieldBegin('intermediate_input_ids', TType::LIST, 11);
    {
      $xfer += $output->writeListBegin(TType::STRING, scalar(@{$self->{intermediate_input_ids}}));
      {
        foreach my $iter48 (@{$self->{intermediate_input_ids}}) 
        {
          $xfer += $output->writeString($iter48);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{intermediate_output_ids}) {
    $xfer += $output->writeFieldBegin('intermediate_output_ids', TType::LIST, 12);
    {
      $xfer += $output->writeListBegin(TType::STRING, scalar(@{$self->{intermediate_output_ids}}));
      {
        foreach my $iter49 (@{$self->{intermediate_output_ids}}) 
        {
          $xfer += $output->writeString($iter49);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{external_data}) {
    $xfer += $output->writeFieldBegin('external_data', TType::LIST, 13);
    {
      $xfer += $output->writeListBegin(TType::STRUCT, scalar(@{$self->{external_data}}));
      {
        foreach my $iter50 (@{$self->{external_data}}) 
        {
          $xfer += ${iter50}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{description}) {
    $xfer += $output->writeFieldBegin('description', TType::STRING, 14);
    $xfer += $output->writeString($self->{description});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::taxonomy::taxon::ServiceException;
use base qw(Thrift::TException);
use base qw(Class::Accessor);
DOEKBase::DataAPI::taxonomy::taxon::ServiceException->mk_accessors( qw( message stacktrace inputs ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{message} = undef;
  $self->{stacktrace} = undef;
  $self->{inputs} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{message}) {
      $self->{message} = $vals->{message};
    }
    if (defined $vals->{stacktrace}) {
      $self->{stacktrace} = $vals->{stacktrace};
    }
    if (defined $vals->{inputs}) {
      $self->{inputs} = $vals->{inputs};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'ServiceException';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{message});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{stacktrace});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::MAP) {
        {
          my $_size51 = 0;
          $self->{inputs} = {};
          my $_ktype52 = 0;
          my $_vtype53 = 0;
          $xfer += $input->readMapBegin(\$_ktype52, \$_vtype53, \$_size51);
          for (my $_i55 = 0; $_i55 < $_size51; ++$_i55)
          {
            my $key56 = '';
            my $val57 = '';
            $xfer += $input->readString(\$key56);
            $xfer += $input->readString(\$val57);
            $self->{inputs}->{$key56} = $val57;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('ServiceException');
  if (defined $self->{message}) {
    $xfer += $output->writeFieldBegin('message', TType::STRING, 1);
    $xfer += $output->writeString($self->{message});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{stacktrace}) {
    $xfer += $output->writeFieldBegin('stacktrace', TType::STRING, 2);
    $xfer += $output->writeString($self->{stacktrace});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{inputs}) {
    $xfer += $output->writeFieldBegin('inputs', TType::MAP, 3);
    {
      $xfer += $output->writeMapBegin(TType::STRING, TType::STRING, scalar(keys %{$self->{inputs}}));
      {
        while( my ($kiter58,$viter59) = each %{$self->{inputs}}) 
        {
          $xfer += $output->writeString($kiter58);
          $xfer += $output->writeString($viter59);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::taxonomy::taxon::AuthorizationException;
use base qw(Thrift::TException);
use base qw(Class::Accessor);
DOEKBase::DataAPI::taxonomy::taxon::AuthorizationException->mk_accessors( qw( message stacktrace ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{message} = undef;
  $self->{stacktrace} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{message}) {
      $self->{message} = $vals->{message};
    }
    if (defined $vals->{stacktrace}) {
      $self->{stacktrace} = $vals->{stacktrace};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'AuthorizationException';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{message});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{stacktrace});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('AuthorizationException');
  if (defined $self->{message}) {
    $xfer += $output->writeFieldBegin('message', TType::STRING, 1);
    $xfer += $output->writeString($self->{message});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{stacktrace}) {
    $xfer += $output->writeFieldBegin('stacktrace', TType::STRING, 2);
    $xfer += $output->writeString($self->{stacktrace});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::taxonomy::taxon::AuthenticationException;
use base qw(Thrift::TException);
use base qw(Class::Accessor);
DOEKBase::DataAPI::taxonomy::taxon::AuthenticationException->mk_accessors( qw( message stacktrace ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{message} = undef;
  $self->{stacktrace} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{message}) {
      $self->{message} = $vals->{message};
    }
    if (defined $vals->{stacktrace}) {
      $self->{stacktrace} = $vals->{stacktrace};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'AuthenticationException';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{message});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{stacktrace});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('AuthenticationException');
  if (defined $self->{message}) {
    $xfer += $output->writeFieldBegin('message', TType::STRING, 1);
    $xfer += $output->writeString($self->{message});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{stacktrace}) {
    $xfer += $output->writeFieldBegin('stacktrace', TType::STRING, 2);
    $xfer += $output->writeString($self->{stacktrace});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::taxonomy::taxon::ObjectReferenceException;
use base qw(Thrift::TException);
use base qw(Class::Accessor);
DOEKBase::DataAPI::taxonomy::taxon::ObjectReferenceException->mk_accessors( qw( message stacktrace ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{message} = undef;
  $self->{stacktrace} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{message}) {
      $self->{message} = $vals->{message};
    }
    if (defined $vals->{stacktrace}) {
      $self->{stacktrace} = $vals->{stacktrace};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'ObjectReferenceException';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{message});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{stacktrace});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('ObjectReferenceException');
  if (defined $self->{message}) {
    $xfer += $output->writeFieldBegin('message', TType::STRING, 1);
    $xfer += $output->writeString($self->{message});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{stacktrace}) {
    $xfer += $output->writeFieldBegin('stacktrace', TType::STRING, 2);
    $xfer += $output->writeString($self->{stacktrace});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::taxonomy::taxon::AttributeException;
use base qw(Thrift::TException);
use base qw(Class::Accessor);
DOEKBase::DataAPI::taxonomy::taxon::AttributeException->mk_accessors( qw( message stacktrace ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{message} = undef;
  $self->{stacktrace} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{message}) {
      $self->{message} = $vals->{message};
    }
    if (defined $vals->{stacktrace}) {
      $self->{stacktrace} = $vals->{stacktrace};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'AttributeException';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{message});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{stacktrace});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('AttributeException');
  if (defined $self->{message}) {
    $xfer += $output->writeFieldBegin('message', TType::STRING, 1);
    $xfer += $output->writeString($self->{message});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{stacktrace}) {
    $xfer += $output->writeFieldBegin('stacktrace', TType::STRING, 2);
    $xfer += $output->writeString($self->{stacktrace});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::taxonomy::taxon::TypeException;
use base qw(Thrift::TException);
use base qw(Class::Accessor);
DOEKBase::DataAPI::taxonomy::taxon::TypeException->mk_accessors( qw( message stacktrace valid_types ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{message} = undef;
  $self->{stacktrace} = undef;
  $self->{valid_types} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{message}) {
      $self->{message} = $vals->{message};
    }
    if (defined $vals->{stacktrace}) {
      $self->{stacktrace} = $vals->{stacktrace};
    }
    if (defined $vals->{valid_types}) {
      $self->{valid_types} = $vals->{valid_types};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'TypeException';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{message});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{stacktrace});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size60 = 0;
          $self->{valid_types} = [];
          my $_etype63 = 0;
          $xfer += $input->readListBegin(\$_etype63, \$_size60);
          for (my $_i64 = 0; $_i64 < $_size60; ++$_i64)
          {
            my $elem65 = undef;
            $xfer += $input->readString(\$elem65);
            push(@{$self->{valid_types}},$elem65);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('TypeException');
  if (defined $self->{message}) {
    $xfer += $output->writeFieldBegin('message', TType::STRING, 1);
    $xfer += $output->writeString($self->{message});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{stacktrace}) {
    $xfer += $output->writeFieldBegin('stacktrace', TType::STRING, 2);
    $xfer += $output->writeString($self->{stacktrace});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{valid_types}) {
    $xfer += $output->writeFieldBegin('valid_types', TType::LIST, 3);
    {
      $xfer += $output->writeListBegin(TType::STRING, scalar(@{$self->{valid_types}}));
      {
        foreach my $iter66 (@{$self->{valid_types}}) 
        {
          $xfer += $output->writeString($iter66);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

1;
