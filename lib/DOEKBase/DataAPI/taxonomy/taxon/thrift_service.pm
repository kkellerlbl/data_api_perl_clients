#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
require 5.6.0;
use strict;
use warnings;
use Thrift;

use DOEKBase::DataAPI::taxonomy::taxon::Types;

# HELPER FUNCTIONS AND STRUCTURES

package DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_info_args;
use base qw(Class::Accessor);
DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_info_args->mk_accessors( qw( token ref ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{token} = undef;
  $self->{ref} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{token}) {
      $self->{token} = $vals->{token};
    }
    if (defined $vals->{ref}) {
      $self->{ref} = $vals->{ref};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_info_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{token});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{ref});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_info_args');
  if (defined $self->{token}) {
    $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
    $xfer += $output->writeString($self->{token});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ref}) {
    $xfer += $output->writeFieldBegin('ref', TType::STRING, 2);
    $xfer += $output->writeString($self->{ref});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_info_result;
use base qw(Class::Accessor);
DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_info_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{generic_exception} = undef;
  $self->{authorization_exception} = undef;
  $self->{authentication_exception} = undef;
  $self->{reference_exception} = undef;
  $self->{attribute_exception} = undef;
  $self->{type_exception} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{generic_exception}) {
      $self->{generic_exception} = $vals->{generic_exception};
    }
    if (defined $vals->{authorization_exception}) {
      $self->{authorization_exception} = $vals->{authorization_exception};
    }
    if (defined $vals->{authentication_exception}) {
      $self->{authentication_exception} = $vals->{authentication_exception};
    }
    if (defined $vals->{reference_exception}) {
      $self->{reference_exception} = $vals->{reference_exception};
    }
    if (defined $vals->{attribute_exception}) {
      $self->{attribute_exception} = $vals->{attribute_exception};
    }
    if (defined $vals->{type_exception}) {
      $self->{type_exception} = $vals->{type_exception};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_info_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{success} = new DOEKBase::DataAPI::taxonomy::taxon::ObjectInfo();
        $xfer += $self->{success}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{generic_exception} = new DOEKBase::DataAPI::taxonomy::taxon::ServiceException();
        $xfer += $self->{generic_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authorization_exception} = new DOEKBase::DataAPI::taxonomy::taxon::AuthorizationException();
        $xfer += $self->{authorization_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authentication_exception} = new DOEKBase::DataAPI::taxonomy::taxon::AuthenticationException();
        $xfer += $self->{authentication_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{reference_exception} = new DOEKBase::DataAPI::taxonomy::taxon::ObjectReferenceException();
        $xfer += $self->{reference_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{attribute_exception} = new DOEKBase::DataAPI::taxonomy::taxon::AttributeException();
        $xfer += $self->{attribute_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{type_exception} = new DOEKBase::DataAPI::taxonomy::taxon::TypeException();
        $xfer += $self->{type_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_info_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
    $xfer += $self->{success}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{generic_exception}) {
    $xfer += $output->writeFieldBegin('generic_exception', TType::STRUCT, 1);
    $xfer += $self->{generic_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authorization_exception}) {
    $xfer += $output->writeFieldBegin('authorization_exception', TType::STRUCT, 2);
    $xfer += $self->{authorization_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authentication_exception}) {
    $xfer += $output->writeFieldBegin('authentication_exception', TType::STRUCT, 3);
    $xfer += $self->{authentication_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reference_exception}) {
    $xfer += $output->writeFieldBegin('reference_exception', TType::STRUCT, 4);
    $xfer += $self->{reference_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{attribute_exception}) {
    $xfer += $output->writeFieldBegin('attribute_exception', TType::STRUCT, 5);
    $xfer += $self->{attribute_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type_exception}) {
    $xfer += $output->writeFieldBegin('type_exception', TType::STRUCT, 6);
    $xfer += $self->{type_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_history_args;
use base qw(Class::Accessor);
DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_history_args->mk_accessors( qw( token ref ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{token} = undef;
  $self->{ref} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{token}) {
      $self->{token} = $vals->{token};
    }
    if (defined $vals->{ref}) {
      $self->{ref} = $vals->{ref};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_history_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{token});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{ref});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_history_args');
  if (defined $self->{token}) {
    $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
    $xfer += $output->writeString($self->{token});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ref}) {
    $xfer += $output->writeFieldBegin('ref', TType::STRING, 2);
    $xfer += $output->writeString($self->{ref});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_history_result;
use base qw(Class::Accessor);
DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_history_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{generic_exception} = undef;
  $self->{authorization_exception} = undef;
  $self->{authentication_exception} = undef;
  $self->{reference_exception} = undef;
  $self->{attribute_exception} = undef;
  $self->{type_exception} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{generic_exception}) {
      $self->{generic_exception} = $vals->{generic_exception};
    }
    if (defined $vals->{authorization_exception}) {
      $self->{authorization_exception} = $vals->{authorization_exception};
    }
    if (defined $vals->{authentication_exception}) {
      $self->{authentication_exception} = $vals->{authentication_exception};
    }
    if (defined $vals->{reference_exception}) {
      $self->{reference_exception} = $vals->{reference_exception};
    }
    if (defined $vals->{attribute_exception}) {
      $self->{attribute_exception} = $vals->{attribute_exception};
    }
    if (defined $vals->{type_exception}) {
      $self->{type_exception} = $vals->{type_exception};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_history_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size67 = 0;
          $self->{success} = [];
          my $_etype70 = 0;
          $xfer += $input->readListBegin(\$_etype70, \$_size67);
          for (my $_i71 = 0; $_i71 < $_size67; ++$_i71)
          {
            my $elem72 = undef;
            $elem72 = new DOEKBase::DataAPI::taxonomy::taxon::ObjectInfo();
            $xfer += $elem72->read($input);
            push(@{$self->{success}},$elem72);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{generic_exception} = new DOEKBase::DataAPI::taxonomy::taxon::ServiceException();
        $xfer += $self->{generic_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authorization_exception} = new DOEKBase::DataAPI::taxonomy::taxon::AuthorizationException();
        $xfer += $self->{authorization_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authentication_exception} = new DOEKBase::DataAPI::taxonomy::taxon::AuthenticationException();
        $xfer += $self->{authentication_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{reference_exception} = new DOEKBase::DataAPI::taxonomy::taxon::ObjectReferenceException();
        $xfer += $self->{reference_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{attribute_exception} = new DOEKBase::DataAPI::taxonomy::taxon::AttributeException();
        $xfer += $self->{attribute_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{type_exception} = new DOEKBase::DataAPI::taxonomy::taxon::TypeException();
        $xfer += $self->{type_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_history_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::LIST, 0);
    {
      $xfer += $output->writeListBegin(TType::STRUCT, scalar(@{$self->{success}}));
      {
        foreach my $iter73 (@{$self->{success}}) 
        {
          $xfer += ${iter73}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{generic_exception}) {
    $xfer += $output->writeFieldBegin('generic_exception', TType::STRUCT, 1);
    $xfer += $self->{generic_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authorization_exception}) {
    $xfer += $output->writeFieldBegin('authorization_exception', TType::STRUCT, 2);
    $xfer += $self->{authorization_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authentication_exception}) {
    $xfer += $output->writeFieldBegin('authentication_exception', TType::STRUCT, 3);
    $xfer += $self->{authentication_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reference_exception}) {
    $xfer += $output->writeFieldBegin('reference_exception', TType::STRUCT, 4);
    $xfer += $self->{reference_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{attribute_exception}) {
    $xfer += $output->writeFieldBegin('attribute_exception', TType::STRUCT, 5);
    $xfer += $self->{attribute_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type_exception}) {
    $xfer += $output->writeFieldBegin('type_exception', TType::STRUCT, 6);
    $xfer += $self->{type_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_provenance_args;
use base qw(Class::Accessor);
DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_provenance_args->mk_accessors( qw( token ref ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{token} = undef;
  $self->{ref} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{token}) {
      $self->{token} = $vals->{token};
    }
    if (defined $vals->{ref}) {
      $self->{ref} = $vals->{ref};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_provenance_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{token});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{ref});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_provenance_args');
  if (defined $self->{token}) {
    $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
    $xfer += $output->writeString($self->{token});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ref}) {
    $xfer += $output->writeFieldBegin('ref', TType::STRING, 2);
    $xfer += $output->writeString($self->{ref});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_provenance_result;
use base qw(Class::Accessor);
DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_provenance_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{generic_exception} = undef;
  $self->{authorization_exception} = undef;
  $self->{authentication_exception} = undef;
  $self->{reference_exception} = undef;
  $self->{attribute_exception} = undef;
  $self->{type_exception} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{generic_exception}) {
      $self->{generic_exception} = $vals->{generic_exception};
    }
    if (defined $vals->{authorization_exception}) {
      $self->{authorization_exception} = $vals->{authorization_exception};
    }
    if (defined $vals->{authentication_exception}) {
      $self->{authentication_exception} = $vals->{authentication_exception};
    }
    if (defined $vals->{reference_exception}) {
      $self->{reference_exception} = $vals->{reference_exception};
    }
    if (defined $vals->{attribute_exception}) {
      $self->{attribute_exception} = $vals->{attribute_exception};
    }
    if (defined $vals->{type_exception}) {
      $self->{type_exception} = $vals->{type_exception};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_provenance_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size74 = 0;
          $self->{success} = [];
          my $_etype77 = 0;
          $xfer += $input->readListBegin(\$_etype77, \$_size74);
          for (my $_i78 = 0; $_i78 < $_size74; ++$_i78)
          {
            my $elem79 = undef;
            $elem79 = new DOEKBase::DataAPI::taxonomy::taxon::ObjectProvenanceAction();
            $xfer += $elem79->read($input);
            push(@{$self->{success}},$elem79);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{generic_exception} = new DOEKBase::DataAPI::taxonomy::taxon::ServiceException();
        $xfer += $self->{generic_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authorization_exception} = new DOEKBase::DataAPI::taxonomy::taxon::AuthorizationException();
        $xfer += $self->{authorization_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authentication_exception} = new DOEKBase::DataAPI::taxonomy::taxon::AuthenticationException();
        $xfer += $self->{authentication_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{reference_exception} = new DOEKBase::DataAPI::taxonomy::taxon::ObjectReferenceException();
        $xfer += $self->{reference_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{attribute_exception} = new DOEKBase::DataAPI::taxonomy::taxon::AttributeException();
        $xfer += $self->{attribute_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{type_exception} = new DOEKBase::DataAPI::taxonomy::taxon::TypeException();
        $xfer += $self->{type_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_provenance_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::LIST, 0);
    {
      $xfer += $output->writeListBegin(TType::STRUCT, scalar(@{$self->{success}}));
      {
        foreach my $iter80 (@{$self->{success}}) 
        {
          $xfer += ${iter80}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{generic_exception}) {
    $xfer += $output->writeFieldBegin('generic_exception', TType::STRUCT, 1);
    $xfer += $self->{generic_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authorization_exception}) {
    $xfer += $output->writeFieldBegin('authorization_exception', TType::STRUCT, 2);
    $xfer += $self->{authorization_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authentication_exception}) {
    $xfer += $output->writeFieldBegin('authentication_exception', TType::STRUCT, 3);
    $xfer += $self->{authentication_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reference_exception}) {
    $xfer += $output->writeFieldBegin('reference_exception', TType::STRUCT, 4);
    $xfer += $self->{reference_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{attribute_exception}) {
    $xfer += $output->writeFieldBegin('attribute_exception', TType::STRUCT, 5);
    $xfer += $self->{attribute_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type_exception}) {
    $xfer += $output->writeFieldBegin('type_exception', TType::STRUCT, 6);
    $xfer += $self->{type_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_id_args;
use base qw(Class::Accessor);
DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_id_args->mk_accessors( qw( token ref ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{token} = undef;
  $self->{ref} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{token}) {
      $self->{token} = $vals->{token};
    }
    if (defined $vals->{ref}) {
      $self->{ref} = $vals->{ref};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_id_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{token});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{ref});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_id_args');
  if (defined $self->{token}) {
    $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
    $xfer += $output->writeString($self->{token});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ref}) {
    $xfer += $output->writeFieldBegin('ref', TType::STRING, 2);
    $xfer += $output->writeString($self->{ref});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_id_result;
use base qw(Class::Accessor);
DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_id_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{generic_exception} = undef;
  $self->{authorization_exception} = undef;
  $self->{authentication_exception} = undef;
  $self->{reference_exception} = undef;
  $self->{attribute_exception} = undef;
  $self->{type_exception} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{generic_exception}) {
      $self->{generic_exception} = $vals->{generic_exception};
    }
    if (defined $vals->{authorization_exception}) {
      $self->{authorization_exception} = $vals->{authorization_exception};
    }
    if (defined $vals->{authentication_exception}) {
      $self->{authentication_exception} = $vals->{authentication_exception};
    }
    if (defined $vals->{reference_exception}) {
      $self->{reference_exception} = $vals->{reference_exception};
    }
    if (defined $vals->{attribute_exception}) {
      $self->{attribute_exception} = $vals->{attribute_exception};
    }
    if (defined $vals->{type_exception}) {
      $self->{type_exception} = $vals->{type_exception};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_id_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::I64) {
        $xfer += $input->readI64(\$self->{success});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{generic_exception} = new DOEKBase::DataAPI::taxonomy::taxon::ServiceException();
        $xfer += $self->{generic_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authorization_exception} = new DOEKBase::DataAPI::taxonomy::taxon::AuthorizationException();
        $xfer += $self->{authorization_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authentication_exception} = new DOEKBase::DataAPI::taxonomy::taxon::AuthenticationException();
        $xfer += $self->{authentication_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{reference_exception} = new DOEKBase::DataAPI::taxonomy::taxon::ObjectReferenceException();
        $xfer += $self->{reference_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{attribute_exception} = new DOEKBase::DataAPI::taxonomy::taxon::AttributeException();
        $xfer += $self->{attribute_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{type_exception} = new DOEKBase::DataAPI::taxonomy::taxon::TypeException();
        $xfer += $self->{type_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_id_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::I64, 0);
    $xfer += $output->writeI64($self->{success});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{generic_exception}) {
    $xfer += $output->writeFieldBegin('generic_exception', TType::STRUCT, 1);
    $xfer += $self->{generic_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authorization_exception}) {
    $xfer += $output->writeFieldBegin('authorization_exception', TType::STRUCT, 2);
    $xfer += $self->{authorization_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authentication_exception}) {
    $xfer += $output->writeFieldBegin('authentication_exception', TType::STRUCT, 3);
    $xfer += $self->{authentication_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reference_exception}) {
    $xfer += $output->writeFieldBegin('reference_exception', TType::STRUCT, 4);
    $xfer += $self->{reference_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{attribute_exception}) {
    $xfer += $output->writeFieldBegin('attribute_exception', TType::STRUCT, 5);
    $xfer += $self->{attribute_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type_exception}) {
    $xfer += $output->writeFieldBegin('type_exception', TType::STRUCT, 6);
    $xfer += $self->{type_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_name_args;
use base qw(Class::Accessor);
DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_name_args->mk_accessors( qw( token ref ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{token} = undef;
  $self->{ref} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{token}) {
      $self->{token} = $vals->{token};
    }
    if (defined $vals->{ref}) {
      $self->{ref} = $vals->{ref};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_name_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{token});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{ref});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_name_args');
  if (defined $self->{token}) {
    $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
    $xfer += $output->writeString($self->{token});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ref}) {
    $xfer += $output->writeFieldBegin('ref', TType::STRING, 2);
    $xfer += $output->writeString($self->{ref});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_name_result;
use base qw(Class::Accessor);
DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_name_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{generic_exception} = undef;
  $self->{authorization_exception} = undef;
  $self->{authentication_exception} = undef;
  $self->{reference_exception} = undef;
  $self->{attribute_exception} = undef;
  $self->{type_exception} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{generic_exception}) {
      $self->{generic_exception} = $vals->{generic_exception};
    }
    if (defined $vals->{authorization_exception}) {
      $self->{authorization_exception} = $vals->{authorization_exception};
    }
    if (defined $vals->{authentication_exception}) {
      $self->{authentication_exception} = $vals->{authentication_exception};
    }
    if (defined $vals->{reference_exception}) {
      $self->{reference_exception} = $vals->{reference_exception};
    }
    if (defined $vals->{attribute_exception}) {
      $self->{attribute_exception} = $vals->{attribute_exception};
    }
    if (defined $vals->{type_exception}) {
      $self->{type_exception} = $vals->{type_exception};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_name_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{success});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{generic_exception} = new DOEKBase::DataAPI::taxonomy::taxon::ServiceException();
        $xfer += $self->{generic_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authorization_exception} = new DOEKBase::DataAPI::taxonomy::taxon::AuthorizationException();
        $xfer += $self->{authorization_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authentication_exception} = new DOEKBase::DataAPI::taxonomy::taxon::AuthenticationException();
        $xfer += $self->{authentication_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{reference_exception} = new DOEKBase::DataAPI::taxonomy::taxon::ObjectReferenceException();
        $xfer += $self->{reference_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{attribute_exception} = new DOEKBase::DataAPI::taxonomy::taxon::AttributeException();
        $xfer += $self->{attribute_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{type_exception} = new DOEKBase::DataAPI::taxonomy::taxon::TypeException();
        $xfer += $self->{type_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_name_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
    $xfer += $output->writeString($self->{success});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{generic_exception}) {
    $xfer += $output->writeFieldBegin('generic_exception', TType::STRUCT, 1);
    $xfer += $self->{generic_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authorization_exception}) {
    $xfer += $output->writeFieldBegin('authorization_exception', TType::STRUCT, 2);
    $xfer += $self->{authorization_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authentication_exception}) {
    $xfer += $output->writeFieldBegin('authentication_exception', TType::STRUCT, 3);
    $xfer += $self->{authentication_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reference_exception}) {
    $xfer += $output->writeFieldBegin('reference_exception', TType::STRUCT, 4);
    $xfer += $self->{reference_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{attribute_exception}) {
    $xfer += $output->writeFieldBegin('attribute_exception', TType::STRUCT, 5);
    $xfer += $self->{attribute_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type_exception}) {
    $xfer += $output->writeFieldBegin('type_exception', TType::STRUCT, 6);
    $xfer += $self->{type_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_version_args;
use base qw(Class::Accessor);
DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_version_args->mk_accessors( qw( token ref ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{token} = undef;
  $self->{ref} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{token}) {
      $self->{token} = $vals->{token};
    }
    if (defined $vals->{ref}) {
      $self->{ref} = $vals->{ref};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_version_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{token});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{ref});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_version_args');
  if (defined $self->{token}) {
    $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
    $xfer += $output->writeString($self->{token});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ref}) {
    $xfer += $output->writeFieldBegin('ref', TType::STRING, 2);
    $xfer += $output->writeString($self->{ref});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_version_result;
use base qw(Class::Accessor);
DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_version_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{generic_exception} = undef;
  $self->{authorization_exception} = undef;
  $self->{authentication_exception} = undef;
  $self->{reference_exception} = undef;
  $self->{attribute_exception} = undef;
  $self->{type_exception} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{generic_exception}) {
      $self->{generic_exception} = $vals->{generic_exception};
    }
    if (defined $vals->{authorization_exception}) {
      $self->{authorization_exception} = $vals->{authorization_exception};
    }
    if (defined $vals->{authentication_exception}) {
      $self->{authentication_exception} = $vals->{authentication_exception};
    }
    if (defined $vals->{reference_exception}) {
      $self->{reference_exception} = $vals->{reference_exception};
    }
    if (defined $vals->{attribute_exception}) {
      $self->{attribute_exception} = $vals->{attribute_exception};
    }
    if (defined $vals->{type_exception}) {
      $self->{type_exception} = $vals->{type_exception};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_version_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{success});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{generic_exception} = new DOEKBase::DataAPI::taxonomy::taxon::ServiceException();
        $xfer += $self->{generic_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authorization_exception} = new DOEKBase::DataAPI::taxonomy::taxon::AuthorizationException();
        $xfer += $self->{authorization_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authentication_exception} = new DOEKBase::DataAPI::taxonomy::taxon::AuthenticationException();
        $xfer += $self->{authentication_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{reference_exception} = new DOEKBase::DataAPI::taxonomy::taxon::ObjectReferenceException();
        $xfer += $self->{reference_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{attribute_exception} = new DOEKBase::DataAPI::taxonomy::taxon::AttributeException();
        $xfer += $self->{attribute_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{type_exception} = new DOEKBase::DataAPI::taxonomy::taxon::TypeException();
        $xfer += $self->{type_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_version_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
    $xfer += $output->writeString($self->{success});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{generic_exception}) {
    $xfer += $output->writeFieldBegin('generic_exception', TType::STRUCT, 1);
    $xfer += $self->{generic_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authorization_exception}) {
    $xfer += $output->writeFieldBegin('authorization_exception', TType::STRUCT, 2);
    $xfer += $self->{authorization_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authentication_exception}) {
    $xfer += $output->writeFieldBegin('authentication_exception', TType::STRUCT, 3);
    $xfer += $self->{authentication_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reference_exception}) {
    $xfer += $output->writeFieldBegin('reference_exception', TType::STRUCT, 4);
    $xfer += $self->{reference_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{attribute_exception}) {
    $xfer += $output->writeFieldBegin('attribute_exception', TType::STRUCT, 5);
    $xfer += $self->{attribute_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type_exception}) {
    $xfer += $output->writeFieldBegin('type_exception', TType::STRUCT, 6);
    $xfer += $self->{type_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_parent_args;
use base qw(Class::Accessor);
DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_parent_args->mk_accessors( qw( token ref ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{token} = undef;
  $self->{ref} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{token}) {
      $self->{token} = $vals->{token};
    }
    if (defined $vals->{ref}) {
      $self->{ref} = $vals->{ref};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_parent_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{token});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{ref});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_parent_args');
  if (defined $self->{token}) {
    $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
    $xfer += $output->writeString($self->{token});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ref}) {
    $xfer += $output->writeFieldBegin('ref', TType::STRING, 2);
    $xfer += $output->writeString($self->{ref});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_parent_result;
use base qw(Class::Accessor);
DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_parent_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{generic_exception} = undef;
  $self->{authorization_exception} = undef;
  $self->{authentication_exception} = undef;
  $self->{reference_exception} = undef;
  $self->{attribute_exception} = undef;
  $self->{type_exception} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{generic_exception}) {
      $self->{generic_exception} = $vals->{generic_exception};
    }
    if (defined $vals->{authorization_exception}) {
      $self->{authorization_exception} = $vals->{authorization_exception};
    }
    if (defined $vals->{authentication_exception}) {
      $self->{authentication_exception} = $vals->{authentication_exception};
    }
    if (defined $vals->{reference_exception}) {
      $self->{reference_exception} = $vals->{reference_exception};
    }
    if (defined $vals->{attribute_exception}) {
      $self->{attribute_exception} = $vals->{attribute_exception};
    }
    if (defined $vals->{type_exception}) {
      $self->{type_exception} = $vals->{type_exception};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_parent_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{success});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{generic_exception} = new DOEKBase::DataAPI::taxonomy::taxon::ServiceException();
        $xfer += $self->{generic_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authorization_exception} = new DOEKBase::DataAPI::taxonomy::taxon::AuthorizationException();
        $xfer += $self->{authorization_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authentication_exception} = new DOEKBase::DataAPI::taxonomy::taxon::AuthenticationException();
        $xfer += $self->{authentication_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{reference_exception} = new DOEKBase::DataAPI::taxonomy::taxon::ObjectReferenceException();
        $xfer += $self->{reference_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{attribute_exception} = new DOEKBase::DataAPI::taxonomy::taxon::AttributeException();
        $xfer += $self->{attribute_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{type_exception} = new DOEKBase::DataAPI::taxonomy::taxon::TypeException();
        $xfer += $self->{type_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_parent_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
    $xfer += $output->writeString($self->{success});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{generic_exception}) {
    $xfer += $output->writeFieldBegin('generic_exception', TType::STRUCT, 1);
    $xfer += $self->{generic_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authorization_exception}) {
    $xfer += $output->writeFieldBegin('authorization_exception', TType::STRUCT, 2);
    $xfer += $self->{authorization_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authentication_exception}) {
    $xfer += $output->writeFieldBegin('authentication_exception', TType::STRUCT, 3);
    $xfer += $self->{authentication_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reference_exception}) {
    $xfer += $output->writeFieldBegin('reference_exception', TType::STRUCT, 4);
    $xfer += $self->{reference_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{attribute_exception}) {
    $xfer += $output->writeFieldBegin('attribute_exception', TType::STRUCT, 5);
    $xfer += $self->{attribute_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type_exception}) {
    $xfer += $output->writeFieldBegin('type_exception', TType::STRUCT, 6);
    $xfer += $self->{type_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_children_args;
use base qw(Class::Accessor);
DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_children_args->mk_accessors( qw( token ref ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{token} = undef;
  $self->{ref} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{token}) {
      $self->{token} = $vals->{token};
    }
    if (defined $vals->{ref}) {
      $self->{ref} = $vals->{ref};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_children_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{token});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{ref});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_children_args');
  if (defined $self->{token}) {
    $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
    $xfer += $output->writeString($self->{token});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ref}) {
    $xfer += $output->writeFieldBegin('ref', TType::STRING, 2);
    $xfer += $output->writeString($self->{ref});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_children_result;
use base qw(Class::Accessor);
DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_children_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{generic_exception} = undef;
  $self->{authorization_exception} = undef;
  $self->{authentication_exception} = undef;
  $self->{reference_exception} = undef;
  $self->{attribute_exception} = undef;
  $self->{type_exception} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{generic_exception}) {
      $self->{generic_exception} = $vals->{generic_exception};
    }
    if (defined $vals->{authorization_exception}) {
      $self->{authorization_exception} = $vals->{authorization_exception};
    }
    if (defined $vals->{authentication_exception}) {
      $self->{authentication_exception} = $vals->{authentication_exception};
    }
    if (defined $vals->{reference_exception}) {
      $self->{reference_exception} = $vals->{reference_exception};
    }
    if (defined $vals->{attribute_exception}) {
      $self->{attribute_exception} = $vals->{attribute_exception};
    }
    if (defined $vals->{type_exception}) {
      $self->{type_exception} = $vals->{type_exception};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_children_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size81 = 0;
          $self->{success} = [];
          my $_etype84 = 0;
          $xfer += $input->readListBegin(\$_etype84, \$_size81);
          for (my $_i85 = 0; $_i85 < $_size81; ++$_i85)
          {
            my $elem86 = undef;
            $xfer += $input->readString(\$elem86);
            push(@{$self->{success}},$elem86);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{generic_exception} = new DOEKBase::DataAPI::taxonomy::taxon::ServiceException();
        $xfer += $self->{generic_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authorization_exception} = new DOEKBase::DataAPI::taxonomy::taxon::AuthorizationException();
        $xfer += $self->{authorization_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authentication_exception} = new DOEKBase::DataAPI::taxonomy::taxon::AuthenticationException();
        $xfer += $self->{authentication_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{reference_exception} = new DOEKBase::DataAPI::taxonomy::taxon::ObjectReferenceException();
        $xfer += $self->{reference_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{attribute_exception} = new DOEKBase::DataAPI::taxonomy::taxon::AttributeException();
        $xfer += $self->{attribute_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{type_exception} = new DOEKBase::DataAPI::taxonomy::taxon::TypeException();
        $xfer += $self->{type_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_children_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::LIST, 0);
    {
      $xfer += $output->writeListBegin(TType::STRING, scalar(@{$self->{success}}));
      {
        foreach my $iter87 (@{$self->{success}}) 
        {
          $xfer += $output->writeString($iter87);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{generic_exception}) {
    $xfer += $output->writeFieldBegin('generic_exception', TType::STRUCT, 1);
    $xfer += $self->{generic_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authorization_exception}) {
    $xfer += $output->writeFieldBegin('authorization_exception', TType::STRUCT, 2);
    $xfer += $self->{authorization_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authentication_exception}) {
    $xfer += $output->writeFieldBegin('authentication_exception', TType::STRUCT, 3);
    $xfer += $self->{authentication_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reference_exception}) {
    $xfer += $output->writeFieldBegin('reference_exception', TType::STRUCT, 4);
    $xfer += $self->{reference_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{attribute_exception}) {
    $xfer += $output->writeFieldBegin('attribute_exception', TType::STRUCT, 5);
    $xfer += $self->{attribute_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type_exception}) {
    $xfer += $output->writeFieldBegin('type_exception', TType::STRUCT, 6);
    $xfer += $self->{type_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_genome_annotations_args;
use base qw(Class::Accessor);
DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_genome_annotations_args->mk_accessors( qw( token ref ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{token} = undef;
  $self->{ref} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{token}) {
      $self->{token} = $vals->{token};
    }
    if (defined $vals->{ref}) {
      $self->{ref} = $vals->{ref};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_genome_annotations_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{token});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{ref});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_genome_annotations_args');
  if (defined $self->{token}) {
    $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
    $xfer += $output->writeString($self->{token});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ref}) {
    $xfer += $output->writeFieldBegin('ref', TType::STRING, 2);
    $xfer += $output->writeString($self->{ref});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_genome_annotations_result;
use base qw(Class::Accessor);
DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_genome_annotations_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{generic_exception} = undef;
  $self->{authorization_exception} = undef;
  $self->{authentication_exception} = undef;
  $self->{reference_exception} = undef;
  $self->{attribute_exception} = undef;
  $self->{type_exception} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{generic_exception}) {
      $self->{generic_exception} = $vals->{generic_exception};
    }
    if (defined $vals->{authorization_exception}) {
      $self->{authorization_exception} = $vals->{authorization_exception};
    }
    if (defined $vals->{authentication_exception}) {
      $self->{authentication_exception} = $vals->{authentication_exception};
    }
    if (defined $vals->{reference_exception}) {
      $self->{reference_exception} = $vals->{reference_exception};
    }
    if (defined $vals->{attribute_exception}) {
      $self->{attribute_exception} = $vals->{attribute_exception};
    }
    if (defined $vals->{type_exception}) {
      $self->{type_exception} = $vals->{type_exception};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_genome_annotations_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size88 = 0;
          $self->{success} = [];
          my $_etype91 = 0;
          $xfer += $input->readListBegin(\$_etype91, \$_size88);
          for (my $_i92 = 0; $_i92 < $_size88; ++$_i92)
          {
            my $elem93 = undef;
            $xfer += $input->readString(\$elem93);
            push(@{$self->{success}},$elem93);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{generic_exception} = new DOEKBase::DataAPI::taxonomy::taxon::ServiceException();
        $xfer += $self->{generic_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authorization_exception} = new DOEKBase::DataAPI::taxonomy::taxon::AuthorizationException();
        $xfer += $self->{authorization_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authentication_exception} = new DOEKBase::DataAPI::taxonomy::taxon::AuthenticationException();
        $xfer += $self->{authentication_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{reference_exception} = new DOEKBase::DataAPI::taxonomy::taxon::ObjectReferenceException();
        $xfer += $self->{reference_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{attribute_exception} = new DOEKBase::DataAPI::taxonomy::taxon::AttributeException();
        $xfer += $self->{attribute_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{type_exception} = new DOEKBase::DataAPI::taxonomy::taxon::TypeException();
        $xfer += $self->{type_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_genome_annotations_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::LIST, 0);
    {
      $xfer += $output->writeListBegin(TType::STRING, scalar(@{$self->{success}}));
      {
        foreach my $iter94 (@{$self->{success}}) 
        {
          $xfer += $output->writeString($iter94);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{generic_exception}) {
    $xfer += $output->writeFieldBegin('generic_exception', TType::STRUCT, 1);
    $xfer += $self->{generic_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authorization_exception}) {
    $xfer += $output->writeFieldBegin('authorization_exception', TType::STRUCT, 2);
    $xfer += $self->{authorization_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authentication_exception}) {
    $xfer += $output->writeFieldBegin('authentication_exception', TType::STRUCT, 3);
    $xfer += $self->{authentication_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reference_exception}) {
    $xfer += $output->writeFieldBegin('reference_exception', TType::STRUCT, 4);
    $xfer += $self->{reference_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{attribute_exception}) {
    $xfer += $output->writeFieldBegin('attribute_exception', TType::STRUCT, 5);
    $xfer += $self->{attribute_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type_exception}) {
    $xfer += $output->writeFieldBegin('type_exception', TType::STRUCT, 6);
    $xfer += $self->{type_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_scientific_lineage_args;
use base qw(Class::Accessor);
DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_scientific_lineage_args->mk_accessors( qw( token ref ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{token} = undef;
  $self->{ref} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{token}) {
      $self->{token} = $vals->{token};
    }
    if (defined $vals->{ref}) {
      $self->{ref} = $vals->{ref};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_scientific_lineage_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{token});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{ref});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_scientific_lineage_args');
  if (defined $self->{token}) {
    $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
    $xfer += $output->writeString($self->{token});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ref}) {
    $xfer += $output->writeFieldBegin('ref', TType::STRING, 2);
    $xfer += $output->writeString($self->{ref});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_scientific_lineage_result;
use base qw(Class::Accessor);
DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_scientific_lineage_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{generic_exception} = undef;
  $self->{authorization_exception} = undef;
  $self->{authentication_exception} = undef;
  $self->{reference_exception} = undef;
  $self->{attribute_exception} = undef;
  $self->{type_exception} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{generic_exception}) {
      $self->{generic_exception} = $vals->{generic_exception};
    }
    if (defined $vals->{authorization_exception}) {
      $self->{authorization_exception} = $vals->{authorization_exception};
    }
    if (defined $vals->{authentication_exception}) {
      $self->{authentication_exception} = $vals->{authentication_exception};
    }
    if (defined $vals->{reference_exception}) {
      $self->{reference_exception} = $vals->{reference_exception};
    }
    if (defined $vals->{attribute_exception}) {
      $self->{attribute_exception} = $vals->{attribute_exception};
    }
    if (defined $vals->{type_exception}) {
      $self->{type_exception} = $vals->{type_exception};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_scientific_lineage_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size95 = 0;
          $self->{success} = [];
          my $_etype98 = 0;
          $xfer += $input->readListBegin(\$_etype98, \$_size95);
          for (my $_i99 = 0; $_i99 < $_size95; ++$_i99)
          {
            my $elem100 = undef;
            $xfer += $input->readString(\$elem100);
            push(@{$self->{success}},$elem100);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{generic_exception} = new DOEKBase::DataAPI::taxonomy::taxon::ServiceException();
        $xfer += $self->{generic_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authorization_exception} = new DOEKBase::DataAPI::taxonomy::taxon::AuthorizationException();
        $xfer += $self->{authorization_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authentication_exception} = new DOEKBase::DataAPI::taxonomy::taxon::AuthenticationException();
        $xfer += $self->{authentication_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{reference_exception} = new DOEKBase::DataAPI::taxonomy::taxon::ObjectReferenceException();
        $xfer += $self->{reference_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{attribute_exception} = new DOEKBase::DataAPI::taxonomy::taxon::AttributeException();
        $xfer += $self->{attribute_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{type_exception} = new DOEKBase::DataAPI::taxonomy::taxon::TypeException();
        $xfer += $self->{type_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_scientific_lineage_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::LIST, 0);
    {
      $xfer += $output->writeListBegin(TType::STRING, scalar(@{$self->{success}}));
      {
        foreach my $iter101 (@{$self->{success}}) 
        {
          $xfer += $output->writeString($iter101);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{generic_exception}) {
    $xfer += $output->writeFieldBegin('generic_exception', TType::STRUCT, 1);
    $xfer += $self->{generic_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authorization_exception}) {
    $xfer += $output->writeFieldBegin('authorization_exception', TType::STRUCT, 2);
    $xfer += $self->{authorization_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authentication_exception}) {
    $xfer += $output->writeFieldBegin('authentication_exception', TType::STRUCT, 3);
    $xfer += $self->{authentication_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reference_exception}) {
    $xfer += $output->writeFieldBegin('reference_exception', TType::STRUCT, 4);
    $xfer += $self->{reference_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{attribute_exception}) {
    $xfer += $output->writeFieldBegin('attribute_exception', TType::STRUCT, 5);
    $xfer += $self->{attribute_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type_exception}) {
    $xfer += $output->writeFieldBegin('type_exception', TType::STRUCT, 6);
    $xfer += $self->{type_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_scientific_name_args;
use base qw(Class::Accessor);
DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_scientific_name_args->mk_accessors( qw( token ref ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{token} = undef;
  $self->{ref} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{token}) {
      $self->{token} = $vals->{token};
    }
    if (defined $vals->{ref}) {
      $self->{ref} = $vals->{ref};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_scientific_name_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{token});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{ref});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_scientific_name_args');
  if (defined $self->{token}) {
    $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
    $xfer += $output->writeString($self->{token});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ref}) {
    $xfer += $output->writeFieldBegin('ref', TType::STRING, 2);
    $xfer += $output->writeString($self->{ref});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_scientific_name_result;
use base qw(Class::Accessor);
DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_scientific_name_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{generic_exception} = undef;
  $self->{authorization_exception} = undef;
  $self->{authentication_exception} = undef;
  $self->{reference_exception} = undef;
  $self->{attribute_exception} = undef;
  $self->{type_exception} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{generic_exception}) {
      $self->{generic_exception} = $vals->{generic_exception};
    }
    if (defined $vals->{authorization_exception}) {
      $self->{authorization_exception} = $vals->{authorization_exception};
    }
    if (defined $vals->{authentication_exception}) {
      $self->{authentication_exception} = $vals->{authentication_exception};
    }
    if (defined $vals->{reference_exception}) {
      $self->{reference_exception} = $vals->{reference_exception};
    }
    if (defined $vals->{attribute_exception}) {
      $self->{attribute_exception} = $vals->{attribute_exception};
    }
    if (defined $vals->{type_exception}) {
      $self->{type_exception} = $vals->{type_exception};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_scientific_name_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{success});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{generic_exception} = new DOEKBase::DataAPI::taxonomy::taxon::ServiceException();
        $xfer += $self->{generic_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authorization_exception} = new DOEKBase::DataAPI::taxonomy::taxon::AuthorizationException();
        $xfer += $self->{authorization_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authentication_exception} = new DOEKBase::DataAPI::taxonomy::taxon::AuthenticationException();
        $xfer += $self->{authentication_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{reference_exception} = new DOEKBase::DataAPI::taxonomy::taxon::ObjectReferenceException();
        $xfer += $self->{reference_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{attribute_exception} = new DOEKBase::DataAPI::taxonomy::taxon::AttributeException();
        $xfer += $self->{attribute_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{type_exception} = new DOEKBase::DataAPI::taxonomy::taxon::TypeException();
        $xfer += $self->{type_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_scientific_name_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
    $xfer += $output->writeString($self->{success});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{generic_exception}) {
    $xfer += $output->writeFieldBegin('generic_exception', TType::STRUCT, 1);
    $xfer += $self->{generic_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authorization_exception}) {
    $xfer += $output->writeFieldBegin('authorization_exception', TType::STRUCT, 2);
    $xfer += $self->{authorization_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authentication_exception}) {
    $xfer += $output->writeFieldBegin('authentication_exception', TType::STRUCT, 3);
    $xfer += $self->{authentication_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reference_exception}) {
    $xfer += $output->writeFieldBegin('reference_exception', TType::STRUCT, 4);
    $xfer += $self->{reference_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{attribute_exception}) {
    $xfer += $output->writeFieldBegin('attribute_exception', TType::STRUCT, 5);
    $xfer += $self->{attribute_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type_exception}) {
    $xfer += $output->writeFieldBegin('type_exception', TType::STRUCT, 6);
    $xfer += $self->{type_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_taxonomic_id_args;
use base qw(Class::Accessor);
DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_taxonomic_id_args->mk_accessors( qw( token ref ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{token} = undef;
  $self->{ref} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{token}) {
      $self->{token} = $vals->{token};
    }
    if (defined $vals->{ref}) {
      $self->{ref} = $vals->{ref};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_taxonomic_id_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{token});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{ref});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_taxonomic_id_args');
  if (defined $self->{token}) {
    $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
    $xfer += $output->writeString($self->{token});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ref}) {
    $xfer += $output->writeFieldBegin('ref', TType::STRING, 2);
    $xfer += $output->writeString($self->{ref});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_taxonomic_id_result;
use base qw(Class::Accessor);
DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_taxonomic_id_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{generic_exception} = undef;
  $self->{authorization_exception} = undef;
  $self->{authentication_exception} = undef;
  $self->{reference_exception} = undef;
  $self->{attribute_exception} = undef;
  $self->{type_exception} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{generic_exception}) {
      $self->{generic_exception} = $vals->{generic_exception};
    }
    if (defined $vals->{authorization_exception}) {
      $self->{authorization_exception} = $vals->{authorization_exception};
    }
    if (defined $vals->{authentication_exception}) {
      $self->{authentication_exception} = $vals->{authentication_exception};
    }
    if (defined $vals->{reference_exception}) {
      $self->{reference_exception} = $vals->{reference_exception};
    }
    if (defined $vals->{attribute_exception}) {
      $self->{attribute_exception} = $vals->{attribute_exception};
    }
    if (defined $vals->{type_exception}) {
      $self->{type_exception} = $vals->{type_exception};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_taxonomic_id_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{success});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{generic_exception} = new DOEKBase::DataAPI::taxonomy::taxon::ServiceException();
        $xfer += $self->{generic_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authorization_exception} = new DOEKBase::DataAPI::taxonomy::taxon::AuthorizationException();
        $xfer += $self->{authorization_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authentication_exception} = new DOEKBase::DataAPI::taxonomy::taxon::AuthenticationException();
        $xfer += $self->{authentication_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{reference_exception} = new DOEKBase::DataAPI::taxonomy::taxon::ObjectReferenceException();
        $xfer += $self->{reference_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{attribute_exception} = new DOEKBase::DataAPI::taxonomy::taxon::AttributeException();
        $xfer += $self->{attribute_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{type_exception} = new DOEKBase::DataAPI::taxonomy::taxon::TypeException();
        $xfer += $self->{type_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_taxonomic_id_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::I32, 0);
    $xfer += $output->writeI32($self->{success});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{generic_exception}) {
    $xfer += $output->writeFieldBegin('generic_exception', TType::STRUCT, 1);
    $xfer += $self->{generic_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authorization_exception}) {
    $xfer += $output->writeFieldBegin('authorization_exception', TType::STRUCT, 2);
    $xfer += $self->{authorization_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authentication_exception}) {
    $xfer += $output->writeFieldBegin('authentication_exception', TType::STRUCT, 3);
    $xfer += $self->{authentication_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reference_exception}) {
    $xfer += $output->writeFieldBegin('reference_exception', TType::STRUCT, 4);
    $xfer += $self->{reference_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{attribute_exception}) {
    $xfer += $output->writeFieldBegin('attribute_exception', TType::STRUCT, 5);
    $xfer += $self->{attribute_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type_exception}) {
    $xfer += $output->writeFieldBegin('type_exception', TType::STRUCT, 6);
    $xfer += $self->{type_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_kingdom_args;
use base qw(Class::Accessor);
DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_kingdom_args->mk_accessors( qw( token ref ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{token} = undef;
  $self->{ref} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{token}) {
      $self->{token} = $vals->{token};
    }
    if (defined $vals->{ref}) {
      $self->{ref} = $vals->{ref};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_kingdom_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{token});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{ref});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_kingdom_args');
  if (defined $self->{token}) {
    $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
    $xfer += $output->writeString($self->{token});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ref}) {
    $xfer += $output->writeFieldBegin('ref', TType::STRING, 2);
    $xfer += $output->writeString($self->{ref});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_kingdom_result;
use base qw(Class::Accessor);
DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_kingdom_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{generic_exception} = undef;
  $self->{authorization_exception} = undef;
  $self->{authentication_exception} = undef;
  $self->{reference_exception} = undef;
  $self->{attribute_exception} = undef;
  $self->{type_exception} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{generic_exception}) {
      $self->{generic_exception} = $vals->{generic_exception};
    }
    if (defined $vals->{authorization_exception}) {
      $self->{authorization_exception} = $vals->{authorization_exception};
    }
    if (defined $vals->{authentication_exception}) {
      $self->{authentication_exception} = $vals->{authentication_exception};
    }
    if (defined $vals->{reference_exception}) {
      $self->{reference_exception} = $vals->{reference_exception};
    }
    if (defined $vals->{attribute_exception}) {
      $self->{attribute_exception} = $vals->{attribute_exception};
    }
    if (defined $vals->{type_exception}) {
      $self->{type_exception} = $vals->{type_exception};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_kingdom_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{success});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{generic_exception} = new DOEKBase::DataAPI::taxonomy::taxon::ServiceException();
        $xfer += $self->{generic_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authorization_exception} = new DOEKBase::DataAPI::taxonomy::taxon::AuthorizationException();
        $xfer += $self->{authorization_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authentication_exception} = new DOEKBase::DataAPI::taxonomy::taxon::AuthenticationException();
        $xfer += $self->{authentication_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{reference_exception} = new DOEKBase::DataAPI::taxonomy::taxon::ObjectReferenceException();
        $xfer += $self->{reference_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{attribute_exception} = new DOEKBase::DataAPI::taxonomy::taxon::AttributeException();
        $xfer += $self->{attribute_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{type_exception} = new DOEKBase::DataAPI::taxonomy::taxon::TypeException();
        $xfer += $self->{type_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_kingdom_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
    $xfer += $output->writeString($self->{success});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{generic_exception}) {
    $xfer += $output->writeFieldBegin('generic_exception', TType::STRUCT, 1);
    $xfer += $self->{generic_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authorization_exception}) {
    $xfer += $output->writeFieldBegin('authorization_exception', TType::STRUCT, 2);
    $xfer += $self->{authorization_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authentication_exception}) {
    $xfer += $output->writeFieldBegin('authentication_exception', TType::STRUCT, 3);
    $xfer += $self->{authentication_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reference_exception}) {
    $xfer += $output->writeFieldBegin('reference_exception', TType::STRUCT, 4);
    $xfer += $self->{reference_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{attribute_exception}) {
    $xfer += $output->writeFieldBegin('attribute_exception', TType::STRUCT, 5);
    $xfer += $self->{attribute_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type_exception}) {
    $xfer += $output->writeFieldBegin('type_exception', TType::STRUCT, 6);
    $xfer += $self->{type_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_domain_args;
use base qw(Class::Accessor);
DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_domain_args->mk_accessors( qw( token ref ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{token} = undef;
  $self->{ref} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{token}) {
      $self->{token} = $vals->{token};
    }
    if (defined $vals->{ref}) {
      $self->{ref} = $vals->{ref};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_domain_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{token});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{ref});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_domain_args');
  if (defined $self->{token}) {
    $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
    $xfer += $output->writeString($self->{token});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ref}) {
    $xfer += $output->writeFieldBegin('ref', TType::STRING, 2);
    $xfer += $output->writeString($self->{ref});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_domain_result;
use base qw(Class::Accessor);
DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_domain_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{generic_exception} = undef;
  $self->{authorization_exception} = undef;
  $self->{authentication_exception} = undef;
  $self->{reference_exception} = undef;
  $self->{attribute_exception} = undef;
  $self->{type_exception} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{generic_exception}) {
      $self->{generic_exception} = $vals->{generic_exception};
    }
    if (defined $vals->{authorization_exception}) {
      $self->{authorization_exception} = $vals->{authorization_exception};
    }
    if (defined $vals->{authentication_exception}) {
      $self->{authentication_exception} = $vals->{authentication_exception};
    }
    if (defined $vals->{reference_exception}) {
      $self->{reference_exception} = $vals->{reference_exception};
    }
    if (defined $vals->{attribute_exception}) {
      $self->{attribute_exception} = $vals->{attribute_exception};
    }
    if (defined $vals->{type_exception}) {
      $self->{type_exception} = $vals->{type_exception};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_domain_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{success});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{generic_exception} = new DOEKBase::DataAPI::taxonomy::taxon::ServiceException();
        $xfer += $self->{generic_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authorization_exception} = new DOEKBase::DataAPI::taxonomy::taxon::AuthorizationException();
        $xfer += $self->{authorization_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authentication_exception} = new DOEKBase::DataAPI::taxonomy::taxon::AuthenticationException();
        $xfer += $self->{authentication_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{reference_exception} = new DOEKBase::DataAPI::taxonomy::taxon::ObjectReferenceException();
        $xfer += $self->{reference_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{attribute_exception} = new DOEKBase::DataAPI::taxonomy::taxon::AttributeException();
        $xfer += $self->{attribute_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{type_exception} = new DOEKBase::DataAPI::taxonomy::taxon::TypeException();
        $xfer += $self->{type_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_domain_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
    $xfer += $output->writeString($self->{success});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{generic_exception}) {
    $xfer += $output->writeFieldBegin('generic_exception', TType::STRUCT, 1);
    $xfer += $self->{generic_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authorization_exception}) {
    $xfer += $output->writeFieldBegin('authorization_exception', TType::STRUCT, 2);
    $xfer += $self->{authorization_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authentication_exception}) {
    $xfer += $output->writeFieldBegin('authentication_exception', TType::STRUCT, 3);
    $xfer += $self->{authentication_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reference_exception}) {
    $xfer += $output->writeFieldBegin('reference_exception', TType::STRUCT, 4);
    $xfer += $self->{reference_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{attribute_exception}) {
    $xfer += $output->writeFieldBegin('attribute_exception', TType::STRUCT, 5);
    $xfer += $self->{attribute_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type_exception}) {
    $xfer += $output->writeFieldBegin('type_exception', TType::STRUCT, 6);
    $xfer += $self->{type_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_genetic_code_args;
use base qw(Class::Accessor);
DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_genetic_code_args->mk_accessors( qw( token ref ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{token} = undef;
  $self->{ref} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{token}) {
      $self->{token} = $vals->{token};
    }
    if (defined $vals->{ref}) {
      $self->{ref} = $vals->{ref};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_genetic_code_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{token});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{ref});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_genetic_code_args');
  if (defined $self->{token}) {
    $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
    $xfer += $output->writeString($self->{token});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ref}) {
    $xfer += $output->writeFieldBegin('ref', TType::STRING, 2);
    $xfer += $output->writeString($self->{ref});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_genetic_code_result;
use base qw(Class::Accessor);
DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_genetic_code_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{generic_exception} = undef;
  $self->{authorization_exception} = undef;
  $self->{authentication_exception} = undef;
  $self->{reference_exception} = undef;
  $self->{attribute_exception} = undef;
  $self->{type_exception} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{generic_exception}) {
      $self->{generic_exception} = $vals->{generic_exception};
    }
    if (defined $vals->{authorization_exception}) {
      $self->{authorization_exception} = $vals->{authorization_exception};
    }
    if (defined $vals->{authentication_exception}) {
      $self->{authentication_exception} = $vals->{authentication_exception};
    }
    if (defined $vals->{reference_exception}) {
      $self->{reference_exception} = $vals->{reference_exception};
    }
    if (defined $vals->{attribute_exception}) {
      $self->{attribute_exception} = $vals->{attribute_exception};
    }
    if (defined $vals->{type_exception}) {
      $self->{type_exception} = $vals->{type_exception};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_genetic_code_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{success});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{generic_exception} = new DOEKBase::DataAPI::taxonomy::taxon::ServiceException();
        $xfer += $self->{generic_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authorization_exception} = new DOEKBase::DataAPI::taxonomy::taxon::AuthorizationException();
        $xfer += $self->{authorization_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authentication_exception} = new DOEKBase::DataAPI::taxonomy::taxon::AuthenticationException();
        $xfer += $self->{authentication_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{reference_exception} = new DOEKBase::DataAPI::taxonomy::taxon::ObjectReferenceException();
        $xfer += $self->{reference_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{attribute_exception} = new DOEKBase::DataAPI::taxonomy::taxon::AttributeException();
        $xfer += $self->{attribute_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{type_exception} = new DOEKBase::DataAPI::taxonomy::taxon::TypeException();
        $xfer += $self->{type_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_genetic_code_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::I32, 0);
    $xfer += $output->writeI32($self->{success});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{generic_exception}) {
    $xfer += $output->writeFieldBegin('generic_exception', TType::STRUCT, 1);
    $xfer += $self->{generic_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authorization_exception}) {
    $xfer += $output->writeFieldBegin('authorization_exception', TType::STRUCT, 2);
    $xfer += $self->{authorization_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authentication_exception}) {
    $xfer += $output->writeFieldBegin('authentication_exception', TType::STRUCT, 3);
    $xfer += $self->{authentication_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reference_exception}) {
    $xfer += $output->writeFieldBegin('reference_exception', TType::STRUCT, 4);
    $xfer += $self->{reference_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{attribute_exception}) {
    $xfer += $output->writeFieldBegin('attribute_exception', TType::STRUCT, 5);
    $xfer += $self->{attribute_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type_exception}) {
    $xfer += $output->writeFieldBegin('type_exception', TType::STRUCT, 6);
    $xfer += $self->{type_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_aliases_args;
use base qw(Class::Accessor);
DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_aliases_args->mk_accessors( qw( token ref ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{token} = undef;
  $self->{ref} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{token}) {
      $self->{token} = $vals->{token};
    }
    if (defined $vals->{ref}) {
      $self->{ref} = $vals->{ref};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_aliases_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{token});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{ref});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_aliases_args');
  if (defined $self->{token}) {
    $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
    $xfer += $output->writeString($self->{token});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ref}) {
    $xfer += $output->writeFieldBegin('ref', TType::STRING, 2);
    $xfer += $output->writeString($self->{ref});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_aliases_result;
use base qw(Class::Accessor);
DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_aliases_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{generic_exception} = undef;
  $self->{authorization_exception} = undef;
  $self->{authentication_exception} = undef;
  $self->{reference_exception} = undef;
  $self->{attribute_exception} = undef;
  $self->{type_exception} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{generic_exception}) {
      $self->{generic_exception} = $vals->{generic_exception};
    }
    if (defined $vals->{authorization_exception}) {
      $self->{authorization_exception} = $vals->{authorization_exception};
    }
    if (defined $vals->{authentication_exception}) {
      $self->{authentication_exception} = $vals->{authentication_exception};
    }
    if (defined $vals->{reference_exception}) {
      $self->{reference_exception} = $vals->{reference_exception};
    }
    if (defined $vals->{attribute_exception}) {
      $self->{attribute_exception} = $vals->{attribute_exception};
    }
    if (defined $vals->{type_exception}) {
      $self->{type_exception} = $vals->{type_exception};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_aliases_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size102 = 0;
          $self->{success} = [];
          my $_etype105 = 0;
          $xfer += $input->readListBegin(\$_etype105, \$_size102);
          for (my $_i106 = 0; $_i106 < $_size102; ++$_i106)
          {
            my $elem107 = undef;
            $xfer += $input->readString(\$elem107);
            push(@{$self->{success}},$elem107);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{generic_exception} = new DOEKBase::DataAPI::taxonomy::taxon::ServiceException();
        $xfer += $self->{generic_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authorization_exception} = new DOEKBase::DataAPI::taxonomy::taxon::AuthorizationException();
        $xfer += $self->{authorization_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authentication_exception} = new DOEKBase::DataAPI::taxonomy::taxon::AuthenticationException();
        $xfer += $self->{authentication_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{reference_exception} = new DOEKBase::DataAPI::taxonomy::taxon::ObjectReferenceException();
        $xfer += $self->{reference_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{attribute_exception} = new DOEKBase::DataAPI::taxonomy::taxon::AttributeException();
        $xfer += $self->{attribute_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{type_exception} = new DOEKBase::DataAPI::taxonomy::taxon::TypeException();
        $xfer += $self->{type_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_aliases_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::LIST, 0);
    {
      $xfer += $output->writeListBegin(TType::STRING, scalar(@{$self->{success}}));
      {
        foreach my $iter108 (@{$self->{success}}) 
        {
          $xfer += $output->writeString($iter108);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{generic_exception}) {
    $xfer += $output->writeFieldBegin('generic_exception', TType::STRUCT, 1);
    $xfer += $self->{generic_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authorization_exception}) {
    $xfer += $output->writeFieldBegin('authorization_exception', TType::STRUCT, 2);
    $xfer += $self->{authorization_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authentication_exception}) {
    $xfer += $output->writeFieldBegin('authentication_exception', TType::STRUCT, 3);
    $xfer += $self->{authentication_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reference_exception}) {
    $xfer += $output->writeFieldBegin('reference_exception', TType::STRUCT, 4);
    $xfer += $self->{reference_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{attribute_exception}) {
    $xfer += $output->writeFieldBegin('attribute_exception', TType::STRUCT, 5);
    $xfer += $self->{attribute_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type_exception}) {
    $xfer += $output->writeFieldBegin('type_exception', TType::STRUCT, 6);
    $xfer += $self->{type_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::taxonomy::taxon::thrift_serviceIf;

use strict;


sub get_info{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

  die 'implement interface';
}

sub get_history{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

  die 'implement interface';
}

sub get_provenance{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

  die 'implement interface';
}

sub get_id{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

  die 'implement interface';
}

sub get_name{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

  die 'implement interface';
}

sub get_version{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

  die 'implement interface';
}

sub get_parent{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

  die 'implement interface';
}

sub get_children{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

  die 'implement interface';
}

sub get_genome_annotations{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

  die 'implement interface';
}

sub get_scientific_lineage{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

  die 'implement interface';
}

sub get_scientific_name{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

  die 'implement interface';
}

sub get_taxonomic_id{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

  die 'implement interface';
}

sub get_kingdom{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

  die 'implement interface';
}

sub get_domain{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

  die 'implement interface';
}

sub get_genetic_code{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

  die 'implement interface';
}

sub get_aliases{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

  die 'implement interface';
}

package DOEKBase::DataAPI::taxonomy::taxon::thrift_serviceRest;

use strict;


sub new {
  my ($classname, $impl) = @_;
  my $self     ={ impl => $impl };

  return bless($self,$classname);
}

sub get_info{
  my ($self, $request) = @_;

  my $token = ($request->{'token'}) ? $request->{'token'} : undef;
  my $ref = ($request->{'ref'}) ? $request->{'ref'} : undef;
  return $self->{impl}->get_info($token, $ref);
}

sub get_history{
  my ($self, $request) = @_;

  my $token = ($request->{'token'}) ? $request->{'token'} : undef;
  my $ref = ($request->{'ref'}) ? $request->{'ref'} : undef;
  return $self->{impl}->get_history($token, $ref);
}

sub get_provenance{
  my ($self, $request) = @_;

  my $token = ($request->{'token'}) ? $request->{'token'} : undef;
  my $ref = ($request->{'ref'}) ? $request->{'ref'} : undef;
  return $self->{impl}->get_provenance($token, $ref);
}

sub get_id{
  my ($self, $request) = @_;

  my $token = ($request->{'token'}) ? $request->{'token'} : undef;
  my $ref = ($request->{'ref'}) ? $request->{'ref'} : undef;
  return $self->{impl}->get_id($token, $ref);
}

sub get_name{
  my ($self, $request) = @_;

  my $token = ($request->{'token'}) ? $request->{'token'} : undef;
  my $ref = ($request->{'ref'}) ? $request->{'ref'} : undef;
  return $self->{impl}->get_name($token, $ref);
}

sub get_version{
  my ($self, $request) = @_;

  my $token = ($request->{'token'}) ? $request->{'token'} : undef;
  my $ref = ($request->{'ref'}) ? $request->{'ref'} : undef;
  return $self->{impl}->get_version($token, $ref);
}

sub get_parent{
  my ($self, $request) = @_;

  my $token = ($request->{'token'}) ? $request->{'token'} : undef;
  my $ref = ($request->{'ref'}) ? $request->{'ref'} : undef;
  return $self->{impl}->get_parent($token, $ref);
}

sub get_children{
  my ($self, $request) = @_;

  my $token = ($request->{'token'}) ? $request->{'token'} : undef;
  my $ref = ($request->{'ref'}) ? $request->{'ref'} : undef;
  return $self->{impl}->get_children($token, $ref);
}

sub get_genome_annotations{
  my ($self, $request) = @_;

  my $token = ($request->{'token'}) ? $request->{'token'} : undef;
  my $ref = ($request->{'ref'}) ? $request->{'ref'} : undef;
  return $self->{impl}->get_genome_annotations($token, $ref);
}

sub get_scientific_lineage{
  my ($self, $request) = @_;

  my $token = ($request->{'token'}) ? $request->{'token'} : undef;
  my $ref = ($request->{'ref'}) ? $request->{'ref'} : undef;
  return $self->{impl}->get_scientific_lineage($token, $ref);
}

sub get_scientific_name{
  my ($self, $request) = @_;

  my $token = ($request->{'token'}) ? $request->{'token'} : undef;
  my $ref = ($request->{'ref'}) ? $request->{'ref'} : undef;
  return $self->{impl}->get_scientific_name($token, $ref);
}

sub get_taxonomic_id{
  my ($self, $request) = @_;

  my $token = ($request->{'token'}) ? $request->{'token'} : undef;
  my $ref = ($request->{'ref'}) ? $request->{'ref'} : undef;
  return $self->{impl}->get_taxonomic_id($token, $ref);
}

sub get_kingdom{
  my ($self, $request) = @_;

  my $token = ($request->{'token'}) ? $request->{'token'} : undef;
  my $ref = ($request->{'ref'}) ? $request->{'ref'} : undef;
  return $self->{impl}->get_kingdom($token, $ref);
}

sub get_domain{
  my ($self, $request) = @_;

  my $token = ($request->{'token'}) ? $request->{'token'} : undef;
  my $ref = ($request->{'ref'}) ? $request->{'ref'} : undef;
  return $self->{impl}->get_domain($token, $ref);
}

sub get_genetic_code{
  my ($self, $request) = @_;

  my $token = ($request->{'token'}) ? $request->{'token'} : undef;
  my $ref = ($request->{'ref'}) ? $request->{'ref'} : undef;
  return $self->{impl}->get_genetic_code($token, $ref);
}

sub get_aliases{
  my ($self, $request) = @_;

  my $token = ($request->{'token'}) ? $request->{'token'} : undef;
  my $ref = ($request->{'ref'}) ? $request->{'ref'} : undef;
  return $self->{impl}->get_aliases($token, $ref);
}

package DOEKBase::DataAPI::taxonomy::taxon::thrift_serviceClient;


use base qw(DOEKBase::DataAPI::taxonomy::taxon::thrift_serviceIf);
sub new {
  my ($classname, $input, $output) = @_;
  my $self      = {};
  $self->{input}  = $input;
  $self->{output} = defined $output ? $output : $input;
  $self->{seqid}  = 0;
  return bless($self,$classname);
}

sub get_info{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

    $self->send_get_info($token, $ref);
  return $self->recv_get_info();
}

sub send_get_info{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

  $self->{output}->writeMessageBegin('get_info', TMessageType::CALL, $self->{seqid});
  my $args = new DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_info_args();
  $args->{token} = $token;
  $args->{ref} = $ref;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_get_info{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_info_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{generic_exception}) {
    die $result->{generic_exception};
  }
  if (defined $result->{authorization_exception}) {
    die $result->{authorization_exception};
  }
  if (defined $result->{authentication_exception}) {
    die $result->{authentication_exception};
  }
  if (defined $result->{reference_exception}) {
    die $result->{reference_exception};
  }
  if (defined $result->{attribute_exception}) {
    die $result->{attribute_exception};
  }
  if (defined $result->{type_exception}) {
    die $result->{type_exception};
  }
  die "get_info failed: unknown result";
}
sub get_history{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

    $self->send_get_history($token, $ref);
  return $self->recv_get_history();
}

sub send_get_history{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

  $self->{output}->writeMessageBegin('get_history', TMessageType::CALL, $self->{seqid});
  my $args = new DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_history_args();
  $args->{token} = $token;
  $args->{ref} = $ref;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_get_history{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_history_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{generic_exception}) {
    die $result->{generic_exception};
  }
  if (defined $result->{authorization_exception}) {
    die $result->{authorization_exception};
  }
  if (defined $result->{authentication_exception}) {
    die $result->{authentication_exception};
  }
  if (defined $result->{reference_exception}) {
    die $result->{reference_exception};
  }
  if (defined $result->{attribute_exception}) {
    die $result->{attribute_exception};
  }
  if (defined $result->{type_exception}) {
    die $result->{type_exception};
  }
  die "get_history failed: unknown result";
}
sub get_provenance{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

    $self->send_get_provenance($token, $ref);
  return $self->recv_get_provenance();
}

sub send_get_provenance{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

  $self->{output}->writeMessageBegin('get_provenance', TMessageType::CALL, $self->{seqid});
  my $args = new DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_provenance_args();
  $args->{token} = $token;
  $args->{ref} = $ref;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_get_provenance{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_provenance_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{generic_exception}) {
    die $result->{generic_exception};
  }
  if (defined $result->{authorization_exception}) {
    die $result->{authorization_exception};
  }
  if (defined $result->{authentication_exception}) {
    die $result->{authentication_exception};
  }
  if (defined $result->{reference_exception}) {
    die $result->{reference_exception};
  }
  if (defined $result->{attribute_exception}) {
    die $result->{attribute_exception};
  }
  if (defined $result->{type_exception}) {
    die $result->{type_exception};
  }
  die "get_provenance failed: unknown result";
}
sub get_id{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

    $self->send_get_id($token, $ref);
  return $self->recv_get_id();
}

sub send_get_id{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

  $self->{output}->writeMessageBegin('get_id', TMessageType::CALL, $self->{seqid});
  my $args = new DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_id_args();
  $args->{token} = $token;
  $args->{ref} = $ref;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_get_id{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_id_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{generic_exception}) {
    die $result->{generic_exception};
  }
  if (defined $result->{authorization_exception}) {
    die $result->{authorization_exception};
  }
  if (defined $result->{authentication_exception}) {
    die $result->{authentication_exception};
  }
  if (defined $result->{reference_exception}) {
    die $result->{reference_exception};
  }
  if (defined $result->{attribute_exception}) {
    die $result->{attribute_exception};
  }
  if (defined $result->{type_exception}) {
    die $result->{type_exception};
  }
  die "get_id failed: unknown result";
}
sub get_name{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

    $self->send_get_name($token, $ref);
  return $self->recv_get_name();
}

sub send_get_name{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

  $self->{output}->writeMessageBegin('get_name', TMessageType::CALL, $self->{seqid});
  my $args = new DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_name_args();
  $args->{token} = $token;
  $args->{ref} = $ref;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_get_name{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_name_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{generic_exception}) {
    die $result->{generic_exception};
  }
  if (defined $result->{authorization_exception}) {
    die $result->{authorization_exception};
  }
  if (defined $result->{authentication_exception}) {
    die $result->{authentication_exception};
  }
  if (defined $result->{reference_exception}) {
    die $result->{reference_exception};
  }
  if (defined $result->{attribute_exception}) {
    die $result->{attribute_exception};
  }
  if (defined $result->{type_exception}) {
    die $result->{type_exception};
  }
  die "get_name failed: unknown result";
}
sub get_version{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

    $self->send_get_version($token, $ref);
  return $self->recv_get_version();
}

sub send_get_version{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

  $self->{output}->writeMessageBegin('get_version', TMessageType::CALL, $self->{seqid});
  my $args = new DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_version_args();
  $args->{token} = $token;
  $args->{ref} = $ref;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_get_version{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_version_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{generic_exception}) {
    die $result->{generic_exception};
  }
  if (defined $result->{authorization_exception}) {
    die $result->{authorization_exception};
  }
  if (defined $result->{authentication_exception}) {
    die $result->{authentication_exception};
  }
  if (defined $result->{reference_exception}) {
    die $result->{reference_exception};
  }
  if (defined $result->{attribute_exception}) {
    die $result->{attribute_exception};
  }
  if (defined $result->{type_exception}) {
    die $result->{type_exception};
  }
  die "get_version failed: unknown result";
}
sub get_parent{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

    $self->send_get_parent($token, $ref);
  return $self->recv_get_parent();
}

sub send_get_parent{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

  $self->{output}->writeMessageBegin('get_parent', TMessageType::CALL, $self->{seqid});
  my $args = new DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_parent_args();
  $args->{token} = $token;
  $args->{ref} = $ref;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_get_parent{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_parent_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{generic_exception}) {
    die $result->{generic_exception};
  }
  if (defined $result->{authorization_exception}) {
    die $result->{authorization_exception};
  }
  if (defined $result->{authentication_exception}) {
    die $result->{authentication_exception};
  }
  if (defined $result->{reference_exception}) {
    die $result->{reference_exception};
  }
  if (defined $result->{attribute_exception}) {
    die $result->{attribute_exception};
  }
  if (defined $result->{type_exception}) {
    die $result->{type_exception};
  }
  die "get_parent failed: unknown result";
}
sub get_children{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

    $self->send_get_children($token, $ref);
  return $self->recv_get_children();
}

sub send_get_children{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

  $self->{output}->writeMessageBegin('get_children', TMessageType::CALL, $self->{seqid});
  my $args = new DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_children_args();
  $args->{token} = $token;
  $args->{ref} = $ref;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_get_children{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_children_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{generic_exception}) {
    die $result->{generic_exception};
  }
  if (defined $result->{authorization_exception}) {
    die $result->{authorization_exception};
  }
  if (defined $result->{authentication_exception}) {
    die $result->{authentication_exception};
  }
  if (defined $result->{reference_exception}) {
    die $result->{reference_exception};
  }
  if (defined $result->{attribute_exception}) {
    die $result->{attribute_exception};
  }
  if (defined $result->{type_exception}) {
    die $result->{type_exception};
  }
  die "get_children failed: unknown result";
}
sub get_genome_annotations{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

    $self->send_get_genome_annotations($token, $ref);
  return $self->recv_get_genome_annotations();
}

sub send_get_genome_annotations{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

  $self->{output}->writeMessageBegin('get_genome_annotations', TMessageType::CALL, $self->{seqid});
  my $args = new DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_genome_annotations_args();
  $args->{token} = $token;
  $args->{ref} = $ref;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_get_genome_annotations{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_genome_annotations_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{generic_exception}) {
    die $result->{generic_exception};
  }
  if (defined $result->{authorization_exception}) {
    die $result->{authorization_exception};
  }
  if (defined $result->{authentication_exception}) {
    die $result->{authentication_exception};
  }
  if (defined $result->{reference_exception}) {
    die $result->{reference_exception};
  }
  if (defined $result->{attribute_exception}) {
    die $result->{attribute_exception};
  }
  if (defined $result->{type_exception}) {
    die $result->{type_exception};
  }
  die "get_genome_annotations failed: unknown result";
}
sub get_scientific_lineage{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

    $self->send_get_scientific_lineage($token, $ref);
  return $self->recv_get_scientific_lineage();
}

sub send_get_scientific_lineage{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

  $self->{output}->writeMessageBegin('get_scientific_lineage', TMessageType::CALL, $self->{seqid});
  my $args = new DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_scientific_lineage_args();
  $args->{token} = $token;
  $args->{ref} = $ref;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_get_scientific_lineage{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_scientific_lineage_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{generic_exception}) {
    die $result->{generic_exception};
  }
  if (defined $result->{authorization_exception}) {
    die $result->{authorization_exception};
  }
  if (defined $result->{authentication_exception}) {
    die $result->{authentication_exception};
  }
  if (defined $result->{reference_exception}) {
    die $result->{reference_exception};
  }
  if (defined $result->{attribute_exception}) {
    die $result->{attribute_exception};
  }
  if (defined $result->{type_exception}) {
    die $result->{type_exception};
  }
  die "get_scientific_lineage failed: unknown result";
}
sub get_scientific_name{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

    $self->send_get_scientific_name($token, $ref);
  return $self->recv_get_scientific_name();
}

sub send_get_scientific_name{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

  $self->{output}->writeMessageBegin('get_scientific_name', TMessageType::CALL, $self->{seqid});
  my $args = new DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_scientific_name_args();
  $args->{token} = $token;
  $args->{ref} = $ref;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_get_scientific_name{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_scientific_name_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{generic_exception}) {
    die $result->{generic_exception};
  }
  if (defined $result->{authorization_exception}) {
    die $result->{authorization_exception};
  }
  if (defined $result->{authentication_exception}) {
    die $result->{authentication_exception};
  }
  if (defined $result->{reference_exception}) {
    die $result->{reference_exception};
  }
  if (defined $result->{attribute_exception}) {
    die $result->{attribute_exception};
  }
  if (defined $result->{type_exception}) {
    die $result->{type_exception};
  }
  die "get_scientific_name failed: unknown result";
}
sub get_taxonomic_id{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

    $self->send_get_taxonomic_id($token, $ref);
  return $self->recv_get_taxonomic_id();
}

sub send_get_taxonomic_id{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

  $self->{output}->writeMessageBegin('get_taxonomic_id', TMessageType::CALL, $self->{seqid});
  my $args = new DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_taxonomic_id_args();
  $args->{token} = $token;
  $args->{ref} = $ref;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_get_taxonomic_id{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_taxonomic_id_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{generic_exception}) {
    die $result->{generic_exception};
  }
  if (defined $result->{authorization_exception}) {
    die $result->{authorization_exception};
  }
  if (defined $result->{authentication_exception}) {
    die $result->{authentication_exception};
  }
  if (defined $result->{reference_exception}) {
    die $result->{reference_exception};
  }
  if (defined $result->{attribute_exception}) {
    die $result->{attribute_exception};
  }
  if (defined $result->{type_exception}) {
    die $result->{type_exception};
  }
  die "get_taxonomic_id failed: unknown result";
}
sub get_kingdom{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

    $self->send_get_kingdom($token, $ref);
  return $self->recv_get_kingdom();
}

sub send_get_kingdom{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

  $self->{output}->writeMessageBegin('get_kingdom', TMessageType::CALL, $self->{seqid});
  my $args = new DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_kingdom_args();
  $args->{token} = $token;
  $args->{ref} = $ref;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_get_kingdom{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_kingdom_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{generic_exception}) {
    die $result->{generic_exception};
  }
  if (defined $result->{authorization_exception}) {
    die $result->{authorization_exception};
  }
  if (defined $result->{authentication_exception}) {
    die $result->{authentication_exception};
  }
  if (defined $result->{reference_exception}) {
    die $result->{reference_exception};
  }
  if (defined $result->{attribute_exception}) {
    die $result->{attribute_exception};
  }
  if (defined $result->{type_exception}) {
    die $result->{type_exception};
  }
  die "get_kingdom failed: unknown result";
}
sub get_domain{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

    $self->send_get_domain($token, $ref);
  return $self->recv_get_domain();
}

sub send_get_domain{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

  $self->{output}->writeMessageBegin('get_domain', TMessageType::CALL, $self->{seqid});
  my $args = new DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_domain_args();
  $args->{token} = $token;
  $args->{ref} = $ref;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_get_domain{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_domain_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{generic_exception}) {
    die $result->{generic_exception};
  }
  if (defined $result->{authorization_exception}) {
    die $result->{authorization_exception};
  }
  if (defined $result->{authentication_exception}) {
    die $result->{authentication_exception};
  }
  if (defined $result->{reference_exception}) {
    die $result->{reference_exception};
  }
  if (defined $result->{attribute_exception}) {
    die $result->{attribute_exception};
  }
  if (defined $result->{type_exception}) {
    die $result->{type_exception};
  }
  die "get_domain failed: unknown result";
}
sub get_genetic_code{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

    $self->send_get_genetic_code($token, $ref);
  return $self->recv_get_genetic_code();
}

sub send_get_genetic_code{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

  $self->{output}->writeMessageBegin('get_genetic_code', TMessageType::CALL, $self->{seqid});
  my $args = new DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_genetic_code_args();
  $args->{token} = $token;
  $args->{ref} = $ref;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_get_genetic_code{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_genetic_code_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{generic_exception}) {
    die $result->{generic_exception};
  }
  if (defined $result->{authorization_exception}) {
    die $result->{authorization_exception};
  }
  if (defined $result->{authentication_exception}) {
    die $result->{authentication_exception};
  }
  if (defined $result->{reference_exception}) {
    die $result->{reference_exception};
  }
  if (defined $result->{attribute_exception}) {
    die $result->{attribute_exception};
  }
  if (defined $result->{type_exception}) {
    die $result->{type_exception};
  }
  die "get_genetic_code failed: unknown result";
}
sub get_aliases{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

    $self->send_get_aliases($token, $ref);
  return $self->recv_get_aliases();
}

sub send_get_aliases{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

  $self->{output}->writeMessageBegin('get_aliases', TMessageType::CALL, $self->{seqid});
  my $args = new DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_aliases_args();
  $args->{token} = $token;
  $args->{ref} = $ref;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_get_aliases{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_aliases_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{generic_exception}) {
    die $result->{generic_exception};
  }
  if (defined $result->{authorization_exception}) {
    die $result->{authorization_exception};
  }
  if (defined $result->{authentication_exception}) {
    die $result->{authentication_exception};
  }
  if (defined $result->{reference_exception}) {
    die $result->{reference_exception};
  }
  if (defined $result->{attribute_exception}) {
    die $result->{attribute_exception};
  }
  if (defined $result->{type_exception}) {
    die $result->{type_exception};
  }
  die "get_aliases failed: unknown result";
}
package DOEKBase::DataAPI::taxonomy::taxon::thrift_serviceProcessor;

use strict;


sub new {
    my ($classname, $handler) = @_;
    my $self      = {};
    $self->{handler} = $handler;
    return bless ($self, $classname);
}

sub process {
    my ($self, $input, $output) = @_;
    my $rseqid = 0;
    my $fname  = undef;
    my $mtype  = 0;

    $input->readMessageBegin(\$fname, \$mtype, \$rseqid);
    my $methodname = 'process_'.$fname;
    if (!$self->can($methodname)) {
      $input->skip(TType::STRUCT);
      $input->readMessageEnd();
      my $x = new TApplicationException('Function '.$fname.' not implemented.', TApplicationException::UNKNOWN_METHOD);
      $output->writeMessageBegin($fname, TMessageType::EXCEPTION, $rseqid);
      $x->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
      return;
    }
    $self->$methodname($rseqid, $input, $output);
    return 1;
}

sub process_get_info {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_info_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_info_result();
    eval {
      $result->{success} = $self->{handler}->get_info($args->token, $args->ref);
    }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::ServiceException') ){ 
      $result->{generic_exception} = $@;
      $@ = undef;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::AuthorizationException') ){ 
      $result->{authorization_exception} = $@;
      $@ = undef;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::AuthenticationException') ){ 
      $result->{authentication_exception} = $@;
      $@ = undef;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::ObjectReferenceException') ){ 
      $result->{reference_exception} = $@;
      $@ = undef;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::AttributeException') ){ 
      $result->{attribute_exception} = $@;
      $@ = undef;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::TypeException') ){ 
      $result->{type_exception} = $@;
      $@ = undef;
    }
    if ($@) {
      $@ =~ s/^\s+|\s+$//g;
      my $err = new TApplicationException("Unexpected Exception: " . $@, TApplicationException::INTERNAL_ERROR);
      $output->writeMessageBegin('get_info', TMessageType::EXCEPTION, $seqid);
      $err->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
      $@ = undef;
      return;
    }
    $output->writeMessageBegin('get_info', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_get_history {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_history_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_history_result();
    eval {
      $result->{success} = $self->{handler}->get_history($args->token, $args->ref);
    }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::ServiceException') ){ 
      $result->{generic_exception} = $@;
      $@ = undef;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::AuthorizationException') ){ 
      $result->{authorization_exception} = $@;
      $@ = undef;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::AuthenticationException') ){ 
      $result->{authentication_exception} = $@;
      $@ = undef;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::ObjectReferenceException') ){ 
      $result->{reference_exception} = $@;
      $@ = undef;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::AttributeException') ){ 
      $result->{attribute_exception} = $@;
      $@ = undef;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::TypeException') ){ 
      $result->{type_exception} = $@;
      $@ = undef;
    }
    if ($@) {
      $@ =~ s/^\s+|\s+$//g;
      my $err = new TApplicationException("Unexpected Exception: " . $@, TApplicationException::INTERNAL_ERROR);
      $output->writeMessageBegin('get_history', TMessageType::EXCEPTION, $seqid);
      $err->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
      $@ = undef;
      return;
    }
    $output->writeMessageBegin('get_history', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_get_provenance {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_provenance_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_provenance_result();
    eval {
      $result->{success} = $self->{handler}->get_provenance($args->token, $args->ref);
    }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::ServiceException') ){ 
      $result->{generic_exception} = $@;
      $@ = undef;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::AuthorizationException') ){ 
      $result->{authorization_exception} = $@;
      $@ = undef;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::AuthenticationException') ){ 
      $result->{authentication_exception} = $@;
      $@ = undef;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::ObjectReferenceException') ){ 
      $result->{reference_exception} = $@;
      $@ = undef;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::AttributeException') ){ 
      $result->{attribute_exception} = $@;
      $@ = undef;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::TypeException') ){ 
      $result->{type_exception} = $@;
      $@ = undef;
    }
    if ($@) {
      $@ =~ s/^\s+|\s+$//g;
      my $err = new TApplicationException("Unexpected Exception: " . $@, TApplicationException::INTERNAL_ERROR);
      $output->writeMessageBegin('get_provenance', TMessageType::EXCEPTION, $seqid);
      $err->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
      $@ = undef;
      return;
    }
    $output->writeMessageBegin('get_provenance', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_get_id {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_id_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_id_result();
    eval {
      $result->{success} = $self->{handler}->get_id($args->token, $args->ref);
    }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::ServiceException') ){ 
      $result->{generic_exception} = $@;
      $@ = undef;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::AuthorizationException') ){ 
      $result->{authorization_exception} = $@;
      $@ = undef;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::AuthenticationException') ){ 
      $result->{authentication_exception} = $@;
      $@ = undef;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::ObjectReferenceException') ){ 
      $result->{reference_exception} = $@;
      $@ = undef;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::AttributeException') ){ 
      $result->{attribute_exception} = $@;
      $@ = undef;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::TypeException') ){ 
      $result->{type_exception} = $@;
      $@ = undef;
    }
    if ($@) {
      $@ =~ s/^\s+|\s+$//g;
      my $err = new TApplicationException("Unexpected Exception: " . $@, TApplicationException::INTERNAL_ERROR);
      $output->writeMessageBegin('get_id', TMessageType::EXCEPTION, $seqid);
      $err->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
      $@ = undef;
      return;
    }
    $output->writeMessageBegin('get_id', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_get_name {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_name_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_name_result();
    eval {
      $result->{success} = $self->{handler}->get_name($args->token, $args->ref);
    }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::ServiceException') ){ 
      $result->{generic_exception} = $@;
      $@ = undef;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::AuthorizationException') ){ 
      $result->{authorization_exception} = $@;
      $@ = undef;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::AuthenticationException') ){ 
      $result->{authentication_exception} = $@;
      $@ = undef;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::ObjectReferenceException') ){ 
      $result->{reference_exception} = $@;
      $@ = undef;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::AttributeException') ){ 
      $result->{attribute_exception} = $@;
      $@ = undef;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::TypeException') ){ 
      $result->{type_exception} = $@;
      $@ = undef;
    }
    if ($@) {
      $@ =~ s/^\s+|\s+$//g;
      my $err = new TApplicationException("Unexpected Exception: " . $@, TApplicationException::INTERNAL_ERROR);
      $output->writeMessageBegin('get_name', TMessageType::EXCEPTION, $seqid);
      $err->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
      $@ = undef;
      return;
    }
    $output->writeMessageBegin('get_name', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_get_version {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_version_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_version_result();
    eval {
      $result->{success} = $self->{handler}->get_version($args->token, $args->ref);
    }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::ServiceException') ){ 
      $result->{generic_exception} = $@;
      $@ = undef;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::AuthorizationException') ){ 
      $result->{authorization_exception} = $@;
      $@ = undef;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::AuthenticationException') ){ 
      $result->{authentication_exception} = $@;
      $@ = undef;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::ObjectReferenceException') ){ 
      $result->{reference_exception} = $@;
      $@ = undef;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::AttributeException') ){ 
      $result->{attribute_exception} = $@;
      $@ = undef;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::TypeException') ){ 
      $result->{type_exception} = $@;
      $@ = undef;
    }
    if ($@) {
      $@ =~ s/^\s+|\s+$//g;
      my $err = new TApplicationException("Unexpected Exception: " . $@, TApplicationException::INTERNAL_ERROR);
      $output->writeMessageBegin('get_version', TMessageType::EXCEPTION, $seqid);
      $err->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
      $@ = undef;
      return;
    }
    $output->writeMessageBegin('get_version', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_get_parent {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_parent_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_parent_result();
    eval {
      $result->{success} = $self->{handler}->get_parent($args->token, $args->ref);
    }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::ServiceException') ){ 
      $result->{generic_exception} = $@;
      $@ = undef;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::AuthorizationException') ){ 
      $result->{authorization_exception} = $@;
      $@ = undef;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::AuthenticationException') ){ 
      $result->{authentication_exception} = $@;
      $@ = undef;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::ObjectReferenceException') ){ 
      $result->{reference_exception} = $@;
      $@ = undef;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::AttributeException') ){ 
      $result->{attribute_exception} = $@;
      $@ = undef;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::TypeException') ){ 
      $result->{type_exception} = $@;
      $@ = undef;
    }
    if ($@) {
      $@ =~ s/^\s+|\s+$//g;
      my $err = new TApplicationException("Unexpected Exception: " . $@, TApplicationException::INTERNAL_ERROR);
      $output->writeMessageBegin('get_parent', TMessageType::EXCEPTION, $seqid);
      $err->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
      $@ = undef;
      return;
    }
    $output->writeMessageBegin('get_parent', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_get_children {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_children_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_children_result();
    eval {
      $result->{success} = $self->{handler}->get_children($args->token, $args->ref);
    }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::ServiceException') ){ 
      $result->{generic_exception} = $@;
      $@ = undef;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::AuthorizationException') ){ 
      $result->{authorization_exception} = $@;
      $@ = undef;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::AuthenticationException') ){ 
      $result->{authentication_exception} = $@;
      $@ = undef;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::ObjectReferenceException') ){ 
      $result->{reference_exception} = $@;
      $@ = undef;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::AttributeException') ){ 
      $result->{attribute_exception} = $@;
      $@ = undef;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::TypeException') ){ 
      $result->{type_exception} = $@;
      $@ = undef;
    }
    if ($@) {
      $@ =~ s/^\s+|\s+$//g;
      my $err = new TApplicationException("Unexpected Exception: " . $@, TApplicationException::INTERNAL_ERROR);
      $output->writeMessageBegin('get_children', TMessageType::EXCEPTION, $seqid);
      $err->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
      $@ = undef;
      return;
    }
    $output->writeMessageBegin('get_children', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_get_genome_annotations {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_genome_annotations_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_genome_annotations_result();
    eval {
      $result->{success} = $self->{handler}->get_genome_annotations($args->token, $args->ref);
    }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::ServiceException') ){ 
      $result->{generic_exception} = $@;
      $@ = undef;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::AuthorizationException') ){ 
      $result->{authorization_exception} = $@;
      $@ = undef;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::AuthenticationException') ){ 
      $result->{authentication_exception} = $@;
      $@ = undef;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::ObjectReferenceException') ){ 
      $result->{reference_exception} = $@;
      $@ = undef;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::AttributeException') ){ 
      $result->{attribute_exception} = $@;
      $@ = undef;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::TypeException') ){ 
      $result->{type_exception} = $@;
      $@ = undef;
    }
    if ($@) {
      $@ =~ s/^\s+|\s+$//g;
      my $err = new TApplicationException("Unexpected Exception: " . $@, TApplicationException::INTERNAL_ERROR);
      $output->writeMessageBegin('get_genome_annotations', TMessageType::EXCEPTION, $seqid);
      $err->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
      $@ = undef;
      return;
    }
    $output->writeMessageBegin('get_genome_annotations', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_get_scientific_lineage {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_scientific_lineage_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_scientific_lineage_result();
    eval {
      $result->{success} = $self->{handler}->get_scientific_lineage($args->token, $args->ref);
    }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::ServiceException') ){ 
      $result->{generic_exception} = $@;
      $@ = undef;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::AuthorizationException') ){ 
      $result->{authorization_exception} = $@;
      $@ = undef;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::AuthenticationException') ){ 
      $result->{authentication_exception} = $@;
      $@ = undef;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::ObjectReferenceException') ){ 
      $result->{reference_exception} = $@;
      $@ = undef;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::AttributeException') ){ 
      $result->{attribute_exception} = $@;
      $@ = undef;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::TypeException') ){ 
      $result->{type_exception} = $@;
      $@ = undef;
    }
    if ($@) {
      $@ =~ s/^\s+|\s+$//g;
      my $err = new TApplicationException("Unexpected Exception: " . $@, TApplicationException::INTERNAL_ERROR);
      $output->writeMessageBegin('get_scientific_lineage', TMessageType::EXCEPTION, $seqid);
      $err->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
      $@ = undef;
      return;
    }
    $output->writeMessageBegin('get_scientific_lineage', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_get_scientific_name {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_scientific_name_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_scientific_name_result();
    eval {
      $result->{success} = $self->{handler}->get_scientific_name($args->token, $args->ref);
    }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::ServiceException') ){ 
      $result->{generic_exception} = $@;
      $@ = undef;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::AuthorizationException') ){ 
      $result->{authorization_exception} = $@;
      $@ = undef;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::AuthenticationException') ){ 
      $result->{authentication_exception} = $@;
      $@ = undef;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::ObjectReferenceException') ){ 
      $result->{reference_exception} = $@;
      $@ = undef;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::AttributeException') ){ 
      $result->{attribute_exception} = $@;
      $@ = undef;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::TypeException') ){ 
      $result->{type_exception} = $@;
      $@ = undef;
    }
    if ($@) {
      $@ =~ s/^\s+|\s+$//g;
      my $err = new TApplicationException("Unexpected Exception: " . $@, TApplicationException::INTERNAL_ERROR);
      $output->writeMessageBegin('get_scientific_name', TMessageType::EXCEPTION, $seqid);
      $err->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
      $@ = undef;
      return;
    }
    $output->writeMessageBegin('get_scientific_name', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_get_taxonomic_id {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_taxonomic_id_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_taxonomic_id_result();
    eval {
      $result->{success} = $self->{handler}->get_taxonomic_id($args->token, $args->ref);
    }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::ServiceException') ){ 
      $result->{generic_exception} = $@;
      $@ = undef;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::AuthorizationException') ){ 
      $result->{authorization_exception} = $@;
      $@ = undef;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::AuthenticationException') ){ 
      $result->{authentication_exception} = $@;
      $@ = undef;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::ObjectReferenceException') ){ 
      $result->{reference_exception} = $@;
      $@ = undef;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::AttributeException') ){ 
      $result->{attribute_exception} = $@;
      $@ = undef;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::TypeException') ){ 
      $result->{type_exception} = $@;
      $@ = undef;
    }
    if ($@) {
      $@ =~ s/^\s+|\s+$//g;
      my $err = new TApplicationException("Unexpected Exception: " . $@, TApplicationException::INTERNAL_ERROR);
      $output->writeMessageBegin('get_taxonomic_id', TMessageType::EXCEPTION, $seqid);
      $err->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
      $@ = undef;
      return;
    }
    $output->writeMessageBegin('get_taxonomic_id', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_get_kingdom {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_kingdom_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_kingdom_result();
    eval {
      $result->{success} = $self->{handler}->get_kingdom($args->token, $args->ref);
    }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::ServiceException') ){ 
      $result->{generic_exception} = $@;
      $@ = undef;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::AuthorizationException') ){ 
      $result->{authorization_exception} = $@;
      $@ = undef;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::AuthenticationException') ){ 
      $result->{authentication_exception} = $@;
      $@ = undef;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::ObjectReferenceException') ){ 
      $result->{reference_exception} = $@;
      $@ = undef;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::AttributeException') ){ 
      $result->{attribute_exception} = $@;
      $@ = undef;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::TypeException') ){ 
      $result->{type_exception} = $@;
      $@ = undef;
    }
    if ($@) {
      $@ =~ s/^\s+|\s+$//g;
      my $err = new TApplicationException("Unexpected Exception: " . $@, TApplicationException::INTERNAL_ERROR);
      $output->writeMessageBegin('get_kingdom', TMessageType::EXCEPTION, $seqid);
      $err->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
      $@ = undef;
      return;
    }
    $output->writeMessageBegin('get_kingdom', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_get_domain {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_domain_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_domain_result();
    eval {
      $result->{success} = $self->{handler}->get_domain($args->token, $args->ref);
    }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::ServiceException') ){ 
      $result->{generic_exception} = $@;
      $@ = undef;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::AuthorizationException') ){ 
      $result->{authorization_exception} = $@;
      $@ = undef;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::AuthenticationException') ){ 
      $result->{authentication_exception} = $@;
      $@ = undef;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::ObjectReferenceException') ){ 
      $result->{reference_exception} = $@;
      $@ = undef;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::AttributeException') ){ 
      $result->{attribute_exception} = $@;
      $@ = undef;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::TypeException') ){ 
      $result->{type_exception} = $@;
      $@ = undef;
    }
    if ($@) {
      $@ =~ s/^\s+|\s+$//g;
      my $err = new TApplicationException("Unexpected Exception: " . $@, TApplicationException::INTERNAL_ERROR);
      $output->writeMessageBegin('get_domain', TMessageType::EXCEPTION, $seqid);
      $err->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
      $@ = undef;
      return;
    }
    $output->writeMessageBegin('get_domain', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_get_genetic_code {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_genetic_code_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_genetic_code_result();
    eval {
      $result->{success} = $self->{handler}->get_genetic_code($args->token, $args->ref);
    }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::ServiceException') ){ 
      $result->{generic_exception} = $@;
      $@ = undef;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::AuthorizationException') ){ 
      $result->{authorization_exception} = $@;
      $@ = undef;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::AuthenticationException') ){ 
      $result->{authentication_exception} = $@;
      $@ = undef;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::ObjectReferenceException') ){ 
      $result->{reference_exception} = $@;
      $@ = undef;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::AttributeException') ){ 
      $result->{attribute_exception} = $@;
      $@ = undef;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::TypeException') ){ 
      $result->{type_exception} = $@;
      $@ = undef;
    }
    if ($@) {
      $@ =~ s/^\s+|\s+$//g;
      my $err = new TApplicationException("Unexpected Exception: " . $@, TApplicationException::INTERNAL_ERROR);
      $output->writeMessageBegin('get_genetic_code', TMessageType::EXCEPTION, $seqid);
      $err->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
      $@ = undef;
      return;
    }
    $output->writeMessageBegin('get_genetic_code', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_get_aliases {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_aliases_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new DOEKBase::DataAPI::taxonomy::taxon::thrift_service_get_aliases_result();
    eval {
      $result->{success} = $self->{handler}->get_aliases($args->token, $args->ref);
    }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::ServiceException') ){ 
      $result->{generic_exception} = $@;
      $@ = undef;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::AuthorizationException') ){ 
      $result->{authorization_exception} = $@;
      $@ = undef;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::AuthenticationException') ){ 
      $result->{authentication_exception} = $@;
      $@ = undef;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::ObjectReferenceException') ){ 
      $result->{reference_exception} = $@;
      $@ = undef;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::AttributeException') ){ 
      $result->{attribute_exception} = $@;
      $@ = undef;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::taxonomy::taxon::TypeException') ){ 
      $result->{type_exception} = $@;
      $@ = undef;
    }
    if ($@) {
      $@ =~ s/^\s+|\s+$//g;
      my $err = new TApplicationException("Unexpected Exception: " . $@, TApplicationException::INTERNAL_ERROR);
      $output->writeMessageBegin('get_aliases', TMessageType::EXCEPTION, $seqid);
      $err->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
      $@ = undef;
      return;
    }
    $output->writeMessageBegin('get_aliases', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

1;
